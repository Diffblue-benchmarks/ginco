package fr.mcc.ginco.services;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.dao.IThesaurusDAO;
import fr.mcc.ginco.dao.IThesaurusVersionHistoryDAO;
import fr.mcc.ginco.exports.IGincoThesaurusExportService;
import fr.mcc.ginco.exports.ISKOSExportService;
import fr.mcc.ginco.helpers.ThesaurusHelper;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

/**
 * Unit tests for fr.mcc.ginco.services.ThesaurusServiceImpl
 *
 * @author Diffblue Cover
 */

public class ThesaurusServiceImplTest {

	@Mock(name = "gincoThesaurusExportService")
	private IGincoThesaurusExportService gincoThesaurusExportService;

	@Mock(name = "skosExportService")
	private ISKOSExportService skosExportService;

	@Mock(name = "thesaurusDAO")
	private IThesaurusDAO thesaurusDAO;

	@Mock(name = "thesaurusHelper")
	private ThesaurusHelper thesaurusHelper;

	@Mock(name = "thesaurusVersionHistoryDAO")
	private IThesaurusVersionHistoryDAO thesaurusVersionHistoryDAO;

	@InjectMocks
	private ThesaurusServiceImpl service;

	@Before public void initMocks() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void getThesaurusById() throws java.text.ParseException, fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setArchived(false);
		thesaurus.setContributor("foo");
		thesaurus.setCoverage("foo");
		Date created =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurus.setCreated(created);
		ThesaurusOrganization creator = new ThesaurusOrganization();
		thesaurus.setCreator(creator);
		Date date = new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurus.setDate(date);
		thesaurus.setDefaultTopConcept(false);
		thesaurus.setDescription("some text");
		thesaurus.setIdentifier("data");
		thesaurus.setPolyHierarchical(false);
		thesaurus.setPublisher("foo");
		thesaurus.setRelation("DE");
		thesaurus.setRights("foo");
		thesaurus.setSource("foo");
		thesaurus.setSubject("foo");
		thesaurus.setTitle("Mr");
		ThesaurusType type = new ThesaurusType();
		thesaurus.setType(type);
		thesaurus.setVersions(new HashSet<ThesaurusVersionHistory>());
		when(thesaurusDAO.getById(Mockito.<Object>any()))
			.thenReturn(thesaurus);

		// act
		Thesaurus result = service.getThesaurusById("1234");

		// assert
		assertEquals("foo", result.getContributor());
		assertEquals("foo", result.getCoverage());
		assertSame(created, result.getCreated());
		assertSame(creator, result.getCreator());
		assertSame(date, result.getDate());
		assertEquals("some text", result.getDescription());
		assertTrue((result.getFormat()).isEmpty());
		assertEquals("data", result.getIdentifier());
		assertTrue((result.getLang()).isEmpty());
		assertEquals("foo", result.getPublisher());
		assertEquals("DE", result.getRelation());
		assertEquals("foo", result.getRights());
		assertEquals("foo", result.getSource());
		assertEquals("foo", result.getSubject());
		assertEquals("data", result.getThesaurusId());
		assertEquals("Mr", result.getTitle());
		assertSame(type, result.getType());
		assertTrue((result.getVersions()).isEmpty());
		assertFalse(result.isArchived());
		assertFalse(result.isDefaultTopConcept());
		assertFalse(result.isPolyHierarchical());
	}

	@Test
	public void getDefaultThesaurus() throws fr.mcc.ginco.exceptions.TechnicalException {
		Thesaurus result = service.getDefaultThesaurus();
		assertEquals("default.thesaurus.creator.contributor", result.getContributor());
		assertEquals("default.thesaurus.coverage", result.getCoverage());
		assertNull(result.getCreated());
		assertEquals("default.thesaurus.creator.email", result.getCreator().getEmail());
		assertEquals("default.thesaurus.creator.homepage", result.getCreator().getHomepage());
		assertNull(result.getCreator().getIdentifier());
		assertEquals("default.thesaurus.creator.name", result.getCreator().getName());
		assertNull(result.getDate());
		assertEquals("default.thesaurus.description", result.getDescription());
		assertTrue((result.getFormat()).isEmpty());
		assertNull(result.getIdentifier());
		assertTrue((result.getLang()).isEmpty());
		assertEquals("default.thesaurus.publisher", result.getPublisher());
		assertNull(result.getRelation());
		assertEquals("default.thesaurus.rights", result.getRights());
		assertEquals("", result.getSource());
		assertEquals("default.thesaurus.subject", result.getSubject());
		assertNull(result.getThesaurusId());
		assertEquals("default.thesaurus.title", result.getTitle());
		assertNull(result.getType());
		assertNull(result.getVersions());
		assertNull(result.isArchived());
		assertNull(result.isDefaultTopConcept());
		assertNull(result.isPolyHierarchical());
	}

	@Test
	public void getThesaurusList() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<Thesaurus> list = new ArrayList<Thesaurus>();
		Thesaurus thesaurus = new Thesaurus();
		list.add(thesaurus);
		when(thesaurusDAO.findAll(Mockito.<String>any(), Mockito.<fr.mcc.ginco.dao.IGenericDAO.SortingTypes>any()))
			.thenReturn(list);

		// act
		List<Thesaurus> result = service.getThesaurusList();

		// assert
		assertEquals(1, result.size());
		assertSame(thesaurus, result.get(0));
	}

	@Test
	public void getThesaurusLanguagesReturnsEmpty() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusDAO.getById(Mockito.<Object>any()))
			.thenReturn(new Thesaurus());
		assertTrue((service.getThesaurusLanguages("1234")).isEmpty());
	}

	@Test
	public void destroyThesaurus() throws java.text.ParseException, fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setArchived(false);
		thesaurus.setContributor("foo");
		thesaurus.setCoverage("foo");
		Date created1 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurus.setCreated(created1);
		ThesaurusOrganization creator1 = new ThesaurusOrganization();
		thesaurus.setCreator(creator1);
		Date date1 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurus.setDate(date1);
		thesaurus.setDefaultTopConcept(false);
		thesaurus.setDescription("some text");
		thesaurus.setIdentifier("data");
		thesaurus.setPolyHierarchical(false);
		thesaurus.setPublisher("foo");
		thesaurus.setRelation("DE");
		thesaurus.setRights("foo");
		thesaurus.setSource("foo");
		thesaurus.setSubject("foo");
		thesaurus.setTitle("Mr");
		ThesaurusType type1 = new ThesaurusType();
		thesaurus.setType(type1);
		thesaurus.setVersions(new HashSet<ThesaurusVersionHistory>());
		when(thesaurusDAO.delete(Mockito.<Object>any()))
			.thenReturn(thesaurus);

		// act
		Thesaurus result = service.destroyThesaurus(new Thesaurus());

		// assert
		assertEquals("foo", result.getContributor());
		assertEquals("foo", result.getCoverage());
		assertSame(created1, result.getCreated());
		assertSame(creator1, result.getCreator());
		assertSame(date1, result.getDate());
		assertEquals("some text", result.getDescription());
		assertTrue((result.getFormat()).isEmpty());
		assertEquals("data", result.getIdentifier());
		assertTrue((result.getLang()).isEmpty());
		assertEquals("foo", result.getPublisher());
		assertEquals("DE", result.getRelation());
		assertEquals("foo", result.getRights());
		assertEquals("foo", result.getSource());
		assertEquals("foo", result.getSubject());
		assertEquals("data", result.getThesaurusId());
		assertEquals("Mr", result.getTitle());
		assertSame(type1, result.getType());
		assertTrue((result.getVersions()).isEmpty());
		assertFalse(result.isArchived());
		assertFalse(result.isDefaultTopConcept());
		assertFalse(result.isPolyHierarchical());
	}
}

package fr.mcc.ginco.dao.hibernate;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.beans.ThesaurusTermRole;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

/**
 * Unit tests for fr.mcc.ginco.dao.hibernate.ThesaurusTermDAO
 *
 * @author Diffblue Cover
 */

public class ThesaurusTermDAOTest {

	@Test
	public void factory() throws org.hibernate.HibernateException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		SessionFactory sessionFactory = mock(SessionFactory.class);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertSame(sessionFactory, thesaurusTermDAO.getSessionFactory());
	}

	@Test
	public void countSandboxedTermsReturnsOne() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(1L);
		Criteria criteria1 = mock(Criteria.class);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.setProjection(Mockito.<org.hibernate.criterion.Projection>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		when(criteria4.list())
			.thenReturn(list);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria4);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) thesaurusTermDAO.countSandboxedTerms("1234"));
	}

	@Test
	public void countPreferredTermsReturnsOne() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(1L);
		Criteria criteria1 = mock(Criteria.class);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.setProjection(Mockito.<org.hibernate.criterion.Projection>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		Criteria criteria5 = mock(Criteria.class);
		when(criteria5.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria4);
		when(criteria5.list())
			.thenReturn(list);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria5);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) thesaurusTermDAO.countPreferredTerms("1234"));
	}

	@Test
	public void countNonPreferredTermsReturnsOne() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(1L);
		Criteria criteria1 = mock(Criteria.class);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.setProjection(Mockito.<org.hibernate.criterion.Projection>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		Criteria criteria5 = mock(Criteria.class);
		when(criteria5.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria4);
		when(criteria5.list())
			.thenReturn(list);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria5);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) thesaurusTermDAO.countNonPreferredTerms("1234"));
	}

	@Test
	public void countTermsReturnsOne() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(1L);
		Criteria criteria1 = mock(Criteria.class);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.setProjection(Mockito.<org.hibernate.criterion.Projection>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		when(criteria3.list())
			.thenReturn(list);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria3);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) thesaurusTermDAO.countTerms("1234"));
	}

	@Test
	public void countTermsWoNotesReturnsOne() throws org.hibernate.HibernateException, org.hibernate.MappingException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(BigInteger.valueOf(1L));
		Query query = mock(Query.class);
		SQLQuery obj = mock(SQLQuery.class);
		when(obj.list())
			.thenReturn(list);
		when(obj.setParameter(Mockito.<String>any(), Mockito.<Object>any()))
			.thenReturn(query);
		Session session = mock(Session.class);
		when(session.createSQLQuery(Mockito.<String>any()))
			.thenReturn(obj);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) thesaurusTermDAO.countTermsWoNotes("1234"));
	}

	@Test
	public void getConceptPreferredTerm1() throws java.text.ParseException, org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		ThesaurusTerm thesaurusTerm = new ThesaurusTerm();
		ThesaurusConcept concept = mock(ThesaurusConcept.class);
		thesaurusTerm.setConcept(concept);
		Date created1 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setCreated(created1);
		thesaurusTerm.setHidden(false);
		thesaurusTerm.setIdentifier("data");
		Language language = new Language();
		language.setId("1234");
		thesaurusTerm.setLanguage(language);
		thesaurusTerm.setLexicalValue("value");
		Date modified =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setModified(modified);
		thesaurusTerm.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		thesaurusTerm.setRole(role);
		thesaurusTerm.setSource("foo");
		thesaurusTerm.setStatus(1);
		Thesaurus thesaurus = new Thesaurus();
		thesaurusTerm.setThesaurus(thesaurus);
		list.add(thesaurusTerm);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria3);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		ThesaurusTerm result = thesaurusTermDAO.getConceptPreferredTerm("1234");

		// assert
		assertSame(concept, result.getConcept());
		assertSame(created1, result.getCreated());
		assertFalse(result.getHidden());
		assertEquals("data", result.getIdentifier());
		assertSame(language, result.getLanguage());
		assertEquals("value", result.getLexicalValue());
		assertSame(modified, result.getModified());
		assertFalse(result.getPrefered());
		assertSame(role, result.getRole());
		assertEquals("foo", result.getSource());
		assertEquals(1, (int) result.getStatus());
		assertSame(thesaurus, result.getThesaurus());
	}

	@Test
	public void getConceptPreferredTerm2() throws java.text.ParseException, org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		ThesaurusTerm thesaurusTerm = new ThesaurusTerm();
		ThesaurusConcept concept = new ThesaurusConcept();
		thesaurusTerm.setConcept(concept);
		Date created3 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setCreated(created3);
		thesaurusTerm.setHidden(false);
		thesaurusTerm.setIdentifier("data");
		Language language = new Language();
		thesaurusTerm.setLanguage(language);
		thesaurusTerm.setLexicalValue("value");
		Date modified2 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setModified(modified2);
		thesaurusTerm.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		thesaurusTerm.setRole(role);
		thesaurusTerm.setSource("foo");
		thesaurusTerm.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurusTerm.setThesaurus(thesaurus2);
		list.add(thesaurusTerm);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria4);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		ThesaurusTerm result =
			 thesaurusTermDAO.getConceptPreferredTerm("1234", "1234");

		// assert
		assertSame(concept, result.getConcept());
		assertSame(created3, result.getCreated());
		assertFalse(result.getHidden());
		assertEquals("data", result.getIdentifier());
		assertSame(language, result.getLanguage());
		assertEquals("value", result.getLexicalValue());
		assertSame(modified2, result.getModified());
		assertFalse(result.getPrefered());
		assertSame(role, result.getRole());
		assertEquals("foo", result.getSource());
		assertEquals(1, (int) result.getStatus());
		assertSame(thesaurus2, result.getThesaurus());
	}

	@Test
	public void getConceptPreferredTermReturnsNull() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(new ArrayList());
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria4);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		assertNull(thesaurusTermDAO.getConceptPreferredTerm("1234", "1234"));
	}

	@Test
	public void findTermsByConceptId() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add("foo");
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		List<ThesaurusTerm> result = thesaurusTermDAO.findTermsByConceptId("1234");

		// assert
		assertEquals(1, result.size());
		// pojo String
	}

	@Test
	public void findTermsByThesaurusId() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(new Object());
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		List<ThesaurusTerm> result = thesaurusTermDAO.findTermsByThesaurusId("1234");

		// assert
		assertEquals(1, result.size());
		// pojo Object
	}

	@Test
	public void update1() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		Session session1 = mock(Session.class);
		Session session2 = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session2)
			.thenReturn(session1);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		ThesaurusTerm termToUpdate = new ThesaurusTerm();
		termToUpdate.setHidden(false);
		assertSame(termToUpdate, thesaurusTermDAO.update(termToUpdate, false));
		Mockito.verify(session1).saveOrUpdate(ArgumentMatchers.<Object>any());
		Mockito.verify(session2).setFlushMode(ArgumentMatchers.<FlushMode>any());
	}

	@Test
	public void update2() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		Session session1 = mock(Session.class);
		Session session2 = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session2)
			.thenReturn(session1);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		ThesaurusTerm termToUpdate = new ThesaurusTerm();
		assertSame(termToUpdate, thesaurusTermDAO.update(termToUpdate, false));
		assertFalse(termToUpdate.getHidden());
		Mockito.verify(session1).saveOrUpdate(ArgumentMatchers.<Object>any());
		Mockito.verify(session2).setFlushMode(ArgumentMatchers.<FlushMode>any());
	}

	@Test
	public void update3() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		Session session1 = mock(Session.class);
		Session session2 = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session2)
			.thenReturn(session1);
		thesaurusTermDAO.setSessionFactory(sessionFactory);
		ThesaurusTerm termToUpdate = new ThesaurusTerm();
		termToUpdate.setHidden(true);
		termToUpdate.setPrefered(false);
		assertSame(termToUpdate, thesaurusTermDAO.update(termToUpdate, false));
		Mockito.verify(session1).saveOrUpdate(ArgumentMatchers.<Object>any());
		Mockito.verify(session2).setFlushMode(ArgumentMatchers.<FlushMode>any());
	}

	@Test
	public void getTermByLexicalValueThesaurusIdLanguageIdLexicalValueIsValue() throws java.text.ParseException, org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		ThesaurusTerm thesaurusTerm = new ThesaurusTerm();
		ThesaurusConcept concept = new ThesaurusConcept();
		thesaurusTerm.setConcept(concept);
		Date created3 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setCreated(created3);
		thesaurusTerm.setHidden(false);
		thesaurusTerm.setIdentifier("data");
		Language language = new Language();
		thesaurusTerm.setLanguage(language);
		thesaurusTerm.setLexicalValue("value");
		Date modified2 =
			 new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setModified(modified2);
		thesaurusTerm.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		thesaurusTerm.setRole(role);
		thesaurusTerm.setSource("foo");
		thesaurusTerm.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurusTerm.setThesaurus(thesaurus2);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.uniqueResult())
			.thenReturn(thesaurusTerm);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Criteria criteria4 = mock(Criteria.class);
		when(criteria4.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria3);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria4);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		ThesaurusTerm result =
			 thesaurusTermDAO.getTermByLexicalValueThesaurusIdLanguageId("value", "1234", "1234");

		// assert
		assertSame(concept, result.getConcept());
		assertSame(created3, result.getCreated());
		assertFalse(result.getHidden());
		assertEquals("data", result.getIdentifier());
		assertSame(language, result.getLanguage());
		assertEquals("value", result.getLexicalValue());
		assertSame(modified2, result.getModified());
		assertFalse(result.getPrefered());
		assertSame(role, result.getRole());
		assertEquals("foo", result.getSource());
		assertEquals(1, (int) result.getStatus());
		assertSame(thesaurus2, result.getThesaurus());
	}

	@Test
	public void getConceptNotPreferredTerms() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add(new Object());
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria3);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		List<ThesaurusTerm> result =
			 thesaurusTermDAO.getConceptNotPreferredTerms("1234");

		// assert
		assertEquals(1, result.size());
		// pojo Object
	}

	@Test
	public void getConceptPreferredTerms() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		ThesaurusTermDAO thesaurusTermDAO = new ThesaurusTermDAO();
		List list = new ArrayList();
		list.add("foo");
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Criteria criteria3 = mock(Criteria.class);
		when(criteria3.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria2);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria3);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		thesaurusTermDAO.setSessionFactory(sessionFactory);

		// act
		List<ThesaurusTerm> result =
			 thesaurusTermDAO.getConceptPreferredTerms("1234");

		// assert
		assertEquals(1, result.size());
		// pojo String
	}
}

package fr.mcc.ginco.dao.hibernate;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.dao.IGenericDAO;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

/**
 * Unit tests for fr.mcc.ginco.dao.hibernate.GenericHibernateDAO
 *
 * @author Diffblue Cover
 */

public class GenericHibernateDAOTest {

	@Test
	public void factory() throws org.hibernate.HibernateException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertSame(sessionFactory, genericHibernateDAO.getSessionFactory());
	}

	@Test
	public void getByExternalIdReturnsEmpty() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(new ArrayList());
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.add(Mockito.<org.hibernate.criterion.Criterion>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any(), Mockito.<String>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertTrue((genericHibernateDAO.getByExternalId("1234")).isEmpty());
	}

	@Test
	public void findAll() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Criteria criteria = mock(Criteria.class);
		when(criteria.list())
			.thenReturn(new ArrayList());
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertTrue((genericHibernateDAO.findAll()).isEmpty());
	}

	@Test
	public void findAllOrderIsAsc() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(new ArrayList());
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.addOrder(Mockito.<org.hibernate.criterion.Order>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertTrue((genericHibernateDAO.findAll("foo", IGenericDAO.SortingTypes.asc)).isEmpty());
	}

	@Test
	public void findAllOrderIsDesc() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(new ArrayList());
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.addOrder(Mockito.<org.hibernate.criterion.Order>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertTrue((genericHibernateDAO.findAll("foo", IGenericDAO.SortingTypes.desc)).isEmpty());
	}

	@Test
	public void countReturnsOne() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		List list = new ArrayList();
		list.add(1L);
		Criteria criteria1 = mock(Criteria.class);
		when(criteria1.list())
			.thenReturn(list);
		Criteria criteria2 = mock(Criteria.class);
		when(criteria2.setProjection(Mockito.<org.hibernate.criterion.Projection>any()))
			.thenReturn(criteria1);
		Session session = mock(Session.class);
		when(session.createCriteria(Mockito.<Class>any()))
			.thenReturn(criteria2);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertEquals(1L, (long) genericHibernateDAO.count());
	}

	@Test
	public void makePersistent() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Session session = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertEquals("entity", genericHibernateDAO.makePersistent("entity"));
		Mockito.verify(session).saveOrUpdate(ArgumentMatchers.<Object>any());
	}

	@Test
	public void update() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Session session = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertEquals("entity", genericHibernateDAO.update("entity"));
		Mockito.verify(session).saveOrUpdate(ArgumentMatchers.<Object>any());
	}

	@Test
	public void delete() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Session session = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);
		assertEquals("entity", genericHibernateDAO.delete("entity"));
		Mockito.verify(session).delete(ArgumentMatchers.<Object>any());
	}

	@Test
	public void flush() throws org.hibernate.HibernateException, org.hibernate.UnknownProfileException, javax.naming.NamingException {

		// arrange
		GenericHibernateDAO<String, Serializable> genericHibernateDAO =
			 new GenericHibernateDAO<String, Serializable>(String.class);
		Session session = mock(Session.class);
		SessionFactory sessionFactory = mock(SessionFactory.class);
		when(sessionFactory.getCurrentSession())
			.thenReturn(session);
		genericHibernateDAO.setSessionFactory(sessionFactory);

		// act
		genericHibernateDAO.flush();

		// assert
		Mockito.verify(session).flush();
	}
}

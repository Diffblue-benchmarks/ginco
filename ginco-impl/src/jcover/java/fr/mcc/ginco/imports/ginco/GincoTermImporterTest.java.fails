package fr.mcc.ginco.imports.ginco;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import fr.mcc.ginco.beans.CustomTermAttribute;
import fr.mcc.ginco.beans.CustomTermAttributeType;
import fr.mcc.ginco.beans.Note;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.dao.INoteDAO;
import fr.mcc.ginco.dao.IThesaurusTermDAO;
import fr.mcc.ginco.exports.result.bean.GincoExportedEntity;
import fr.mcc.ginco.exports.result.bean.JaxbList;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

/**
 * Unit tests for fr.mcc.ginco.imports.ginco.GincoTermImporter
 *
 * @author Diffblue Cover
 */

public class GincoTermImporterTest {

	@Mock(name = "gincoCustomAttributeImporter")
	private GincoCustomAttributeImporter gincoCustomAttributeImporter;

	@Mock(name = "noteDAO")
	private INoteDAO noteDAO;

	@Mock(name = "thesaurusTermDAO")
	private IThesaurusTermDAO thesaurusTermDAO;

	@InjectMocks
	private GincoTermImporter service;

	@Before public void initMocks() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void storeTermNotesReturnsNull() {

		// arrange
		HashMap<String, JaxbList<Note>> termNotesToImport = new HashMap<String, JaxbList<Note>>();
		ArrayList<Note> list1 = new ArrayList<Note>();
		list1.add(new Note());
		termNotesToImport.put("foo", new JaxbList<Note>(list1));

		// act
		List<Note> result = service.storeTermNotes(termNotesToImport);

		// assert
		assertEquals(1, result.size());
		assertNull(result.get(0));
	}

	@Test
	public void storeTermNotesTermNotesToImportIsNullReturnsEmpty() {
		assertTrue((service.storeTermNotes(null)).isEmpty());
	}

	@Test
	public void storeTerms() {

		// arrange
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		HashMap<String, JaxbList<CustomTermAttribute>> termAttributes = new HashMap<String, JaxbList<CustomTermAttribute>>();
		termAttributes.put(null, new JaxbList<CustomTermAttribute>());
		exportedThesaurus.setTermAttributes(termAttributes);
		ArrayList<ThesaurusTerm> terms = new ArrayList<ThesaurusTerm>();
		terms.add(new ThesaurusTerm());
		exportedThesaurus.setTerms(terms);

		// act
		List<ThesaurusTerm> result = service.storeTerms(exportedThesaurus, new Thesaurus(), new HashMap<String, CustomTermAttributeType>());

		// assert
		assertEquals(1, result.size());
		assertNull(result.get(0));
		Mockito.verify(gincoCustomAttributeImporter).storeCustomTermAttribute(ArgumentMatchers.<List<CustomTermAttribute>>any(), ArgumentMatchers.<ThesaurusTerm>any(), ArgumentMatchers.<Map<String, CustomTermAttributeType>>any());
	}

	@Test
	public void storeTermsReturnsEmpty() {
		assertTrue((service.storeTerms(new GincoExportedEntity(), new Thesaurus(), new HashMap<String, CustomTermAttributeType>())).isEmpty());
	}

	@Test
	public void storeTermsReturnsNull1() {

		// arrange
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		exportedThesaurus.setTermAttributes(null);
		ArrayList<ThesaurusTerm> terms = new ArrayList<ThesaurusTerm>();
		terms.add(new ThesaurusTerm());
		exportedThesaurus.setTerms(terms);

		// act
		List<ThesaurusTerm> result = service.storeTerms(exportedThesaurus, new Thesaurus(), new HashMap<String, CustomTermAttributeType>());

		// assert
		assertEquals(1, result.size());
		assertNull(result.get(0));
	}

	@Test
	public void storeTermsReturnsNull2() {

		// arrange
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		exportedThesaurus.setTermAttributes(new HashMap<String, JaxbList<CustomTermAttribute>>());
		ArrayList<ThesaurusTerm> terms = new ArrayList<ThesaurusTerm>();
		terms.add(new ThesaurusTerm());
		exportedThesaurus.setTerms(terms);

		// act
		List<ThesaurusTerm> result = service.storeTerms(exportedThesaurus, new Thesaurus(), new HashMap<String, CustomTermAttributeType>());

		// assert
		assertEquals(1, result.size());
		assertNull(result.get(0));
	}
}

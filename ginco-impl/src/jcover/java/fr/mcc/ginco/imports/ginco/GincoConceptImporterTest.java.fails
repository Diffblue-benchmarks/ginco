package fr.mcc.ginco.imports.ginco;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import fr.mcc.ginco.beans.CustomConceptAttribute;
import fr.mcc.ginco.beans.CustomConceptAttributeType;
import fr.mcc.ginco.beans.SplitNonPreferredTerm;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.dao.INoteDAO;
import fr.mcc.ginco.dao.ISplitNonPreferredTermDAO;
import fr.mcc.ginco.dao.IThesaurusConceptDAO;
import fr.mcc.ginco.exports.result.bean.GincoExportedEntity;
import fr.mcc.ginco.exports.result.bean.JaxbList;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

/**
 * Unit tests for fr.mcc.ginco.imports.ginco.GincoConceptImporter
 *
 * @author Diffblue Cover
 */

public class GincoConceptImporterTest {

	@Mock(name = "gincoCustomAttributeImporter")
	private GincoCustomAttributeImporter gincoCustomAttributeImporter;

	@Mock(name = "noteDAO")
	private INoteDAO noteDAO;

	@Mock(name = "splitNonPreferredTermDAO")
	private ISplitNonPreferredTermDAO splitNonPreferredTermDAO;

	@Mock(name = "thesaurusConceptDAO")
	private IThesaurusConceptDAO thesaurusConceptDAO;

	@InjectMocks
	private GincoConceptImporter service;

	@Before public void initMocks() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void storeComplexConceptsComplexConceptsToImportIsEmpty() {
		assertTrue((service.storeComplexConcepts(new ArrayList<SplitNonPreferredTerm>(), new Thesaurus())).isEmpty());
	}

	@Test
	public void storeComplexConceptsComplexConceptsToImportIsNull() {
		assertTrue((service.storeComplexConcepts(null, new Thesaurus())).isEmpty());
	}

	@Test
	public void storeComplexConceptsReturnsNull() {

		// arrange
		ArrayList<SplitNonPreferredTerm> complexConceptsToImport = new ArrayList<SplitNonPreferredTerm>();
		complexConceptsToImport.add(new SplitNonPreferredTerm());

		// act
		List<SplitNonPreferredTerm> result = service.storeComplexConcepts(complexConceptsToImport, new Thesaurus());

		// assert
		assertEquals(1, result.size());
		assertNull(result.get(0));
	}

	@Test
	public void storeConcept1() {
		ThesaurusConcept concept = new ThesaurusConcept();
		concept.setIdentifier("foo");
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		HashMap<String, JaxbList<CustomConceptAttribute>> conceptAttributes = new HashMap<String, JaxbList<CustomConceptAttribute>>();
		conceptAttributes.put("foo", new JaxbList<CustomConceptAttribute>());
		exportedThesaurus.setConceptAttributes(conceptAttributes);
		Thesaurus targetedThesaurus = new Thesaurus();
		assertSame(concept, service.storeConcept(concept, exportedThesaurus, targetedThesaurus, new HashMap<String, CustomConceptAttributeType>()));
		assertSame(targetedThesaurus, concept.getThesaurus());
		Mockito.verify(thesaurusConceptDAO).flush();
		Mockito.verify(gincoCustomAttributeImporter).storeCustomConceptAttribute(ArgumentMatchers.<List<CustomConceptAttribute>>any(), ArgumentMatchers.<ThesaurusConcept>any(), ArgumentMatchers.<Map<String, CustomConceptAttributeType>>any());
	}

	@Test
	public void storeConcept2() {
		ThesaurusConcept concept = new ThesaurusConcept();
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		exportedThesaurus.setConceptAttributes(new HashMap<String, JaxbList<CustomConceptAttribute>>());
		Thesaurus targetedThesaurus = new Thesaurus();
		assertSame(concept, service.storeConcept(concept, exportedThesaurus, targetedThesaurus, new HashMap<String, CustomConceptAttributeType>()));
		assertSame(targetedThesaurus, concept.getThesaurus());
		Mockito.verify(thesaurusConceptDAO).flush();
	}

	@Test
	public void storeConcept3() {
		ThesaurusConcept concept = new ThesaurusConcept();
		GincoExportedEntity exportedThesaurus = new GincoExportedEntity();
		exportedThesaurus.setConceptAttributes(null);
		Thesaurus targetedThesaurus = new Thesaurus();
		assertSame(concept, service.storeConcept(concept, exportedThesaurus, targetedThesaurus, new HashMap<String, CustomConceptAttributeType>()));
		assertSame(targetedThesaurus, concept.getThesaurus());
		Mockito.verify(thesaurusConceptDAO).flush();
	}

	@Test
	public void storeConcepts() {
		assertTrue((service.storeConcepts(new GincoExportedEntity(), new Thesaurus(), new HashMap<String, CustomConceptAttributeType>())).isEmpty());
		Mockito.verify(thesaurusConceptDAO).flush();
	}
}

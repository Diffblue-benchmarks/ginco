package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.GenericStatusView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusVersionHistoryView;
import fr.mcc.ginco.extjs.view.utils.ThesaurusVersionHistoryViewConverter;
import fr.mcc.ginco.services.IThesaurusVersionHistoryService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusVersionRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusVersionRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusVersionRestServiceTest {

	@MockBean(name = "thesaurusVersionHistoryService")
	private IThesaurusVersionHistoryService thesaurusVersionHistoryService;

	@MockBean(name = "thesaurusVersionHistoryViewConverter")
	private ThesaurusVersionHistoryViewConverter thesaurusVersionHistoryViewConverter;

	@Autowired
	private ThesaurusVersionRestService service;

	@Test
	void getVersions() {

		// arrange
		ArrayList<ThesaurusVersionHistoryView> thesaurusVersionHistoryViewList =
			 new ArrayList<ThesaurusVersionHistoryView>();
		ThesaurusVersionHistoryView thesaurusVersionHistoryView =
			 new ThesaurusVersionHistoryView();
		thesaurusVersionHistoryViewList.add(thesaurusVersionHistoryView);
		when(thesaurusVersionHistoryViewConverter.convertList(Mockito.<List<ThesaurusVersionHistory>>any()))
			.thenReturn(thesaurusVersionHistoryViewList);
		ArrayList<ThesaurusVersionHistory> thesaurusVersionHistoryList =
			 new ArrayList<ThesaurusVersionHistory>();
		thesaurusVersionHistoryList.add(new ThesaurusVersionHistory());
		when(thesaurusVersionHistoryService.getVersionsByThesaurusId(Mockito.<String>any()))
			.thenReturn(thesaurusVersionHistoryList);

		// act
		ExtJsonFormLoadData<List<ThesaurusVersionHistoryView>> result =
			 service.getVersions("1234");

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusVersionHistoryView));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAllVersionStatus() {
		ExtJsonFormLoadData<List<GenericStatusView>> result =
			 service.getAllVersionStatus();
		assertThat(result.getData(), hasSize(5));
		assertThat(result.getData().get(0).getStatus(), is(0));
		assertThat(result.getData().get(0).getStatusLabel(), is("Projet"));
		assertThat(result.getData().get(1).getStatus(), is(1));
		assertThat(result.getData().get(1).getStatusLabel(), is("Valid\u00e9"));
		assertThat(result.getData().get(2).getStatus(), is(2));
		assertThat(result.getData().get(2).getStatusLabel(), is("Publi\u00e9"));
		assertThat(result.getData().get(3).getStatus(), is(3));
		assertThat(result.getData().get(3).getStatusLabel(), is("D\u00e9pr\u00e9ci\u00e9"));
		assertThat(result.getData().get(4).getStatus(), is(4));
		assertThat(result.getData().get(4).getStatusLabel(), is("Prohib\u00e9"));
		assertThat(result.getTotal(), is(5L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void updateVersionsVersionViewsIsEmpty() {

		// arrange
		ArrayList<ThesaurusVersionHistoryView> thesaurusVersionHistoryViewList =
			 new ArrayList<ThesaurusVersionHistoryView>();
		ThesaurusVersionHistoryView thesaurusVersionHistoryView1 =
			 new ThesaurusVersionHistoryView();
		thesaurusVersionHistoryViewList.add(thesaurusVersionHistoryView1);
		ArrayList<ThesaurusVersionHistory> thesaurusVersionHistoryList =
			 new ArrayList<ThesaurusVersionHistory>();
		thesaurusVersionHistoryList.add(new ThesaurusVersionHistory());
		when(thesaurusVersionHistoryViewConverter.convertList(Mockito.<List<ThesaurusVersionHistory>>any()))
			.thenReturn(thesaurusVersionHistoryViewList);
		when(thesaurusVersionHistoryViewConverter.convertViewList(Mockito.<List<ThesaurusVersionHistoryView>>any()))
			.thenReturn(thesaurusVersionHistoryList);
		when(thesaurusVersionHistoryService.createOrUpdateVersion(Mockito.<ThesaurusVersionHistory>any()))
			.thenReturn(new ThesaurusVersionHistory());

		// act
		ExtJsonFormLoadData<List<ThesaurusVersionHistoryView>> result =
			 service.updateVersions(new ArrayList<ThesaurusVersionHistoryView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusVersionHistoryView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}
}

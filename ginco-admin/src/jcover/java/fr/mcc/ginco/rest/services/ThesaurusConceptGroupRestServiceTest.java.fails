package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConceptGroup;
import fr.mcc.ginco.beans.ThesaurusConceptGroupType;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptGroupView;
import fr.mcc.ginco.extjs.view.utils.ThesaurusConceptGroupLabelViewConverter;
import fr.mcc.ginco.extjs.view.utils.ThesaurusConceptGroupViewConverter;
import fr.mcc.ginco.services.IThesaurusConceptGroupService;
import fr.mcc.ginco.services.IThesaurusConceptGroupTypeService;
import fr.mcc.ginco.services.IThesaurusService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusConceptGroupRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusConceptGroupRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusConceptGroupRestServiceTest {

	@MockBean(name = "thesaurusConceptGroupLabelViewConverter")
	private ThesaurusConceptGroupLabelViewConverter thesaurusConceptGroupLabelViewConverter;

	@MockBean(name = "thesaurusConceptGroupService")
	private IThesaurusConceptGroupService thesaurusConceptGroupService;

	@MockBean(name = "thesaurusConceptGroupTypeService")
	private IThesaurusConceptGroupTypeService thesaurusConceptGroupTypeService;

	@MockBean(name = "thesaurusConceptGroupViewConverter")
	private ThesaurusConceptGroupViewConverter thesaurusConceptGroupViewConverter;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ThesaurusConceptGroupRestService service;

	@Test
	void getConceptGroupTypes() {

		// arrange
		List<ThesaurusConceptGroupType> list =
			 new ArrayList<ThesaurusConceptGroupType>();
		list.add(new ThesaurusConceptGroupType());
		when(thesaurusConceptGroupTypeService.getConceptGroupTypeList())
			.thenReturn(list);

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptGroupType>> result =
			 service.getConceptGroupTypes();

		// assert
		assertThat(result.getData(), sameInstance(list));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getConceptGroupById() {

		// arrange
		ThesaurusConceptGroupView thesaurusConceptGroupView =
			 new ThesaurusConceptGroupView();
		ArrayList<String> concepts1 = new ArrayList<String>();
		concepts1.add("hello");
		thesaurusConceptGroupView.setConcepts(concepts1);
		thesaurusConceptGroupView.setCreated("hello");
		thesaurusConceptGroupView.setGroupConceptLabelId(1);
		thesaurusConceptGroupView.setIdentifier("data");
		thesaurusConceptGroupView.setIsDynamic(false);
		thesaurusConceptGroupView.setLabel("label");
		thesaurusConceptGroupView.setLanguage("hello");
		thesaurusConceptGroupView.setModified("hello");
		thesaurusConceptGroupView.setNotation("DE");
		thesaurusConceptGroupView.setParentConceptId("1234");
		thesaurusConceptGroupView.setParentConceptLabel("label");
		thesaurusConceptGroupView.setParentGroupId("1234");
		thesaurusConceptGroupView.setParentGroupLabel("label");
		thesaurusConceptGroupView.setThesaurusId("1234");
		thesaurusConceptGroupView.setType("text/plain");
		when(thesaurusConceptGroupViewConverter.convert(Mockito.<ThesaurusConceptGroup>any()))
			.thenReturn(thesaurusConceptGroupView);
		when(thesaurusConceptGroupService.getConceptGroupById(Mockito.<String>any()))
			.thenReturn(new ThesaurusConceptGroup());

		// act
		ThesaurusConceptGroupView result = service.getConceptGroupById("1234");

		// assert
		assertThat(result.getConcepts(), hasSize(1));
		assertThat(result.getConcepts().get(0), is("hello"));
		assertThat(result.getCreated(), is("hello"));
		assertThat(result.getGroupConceptLabelId(), is(1));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getIsDynamic(), is(false));
		assertThat(result.getLabel(), is("label"));
		assertThat(result.getLanguage(), is("hello"));
		assertThat(result.getModified(), is("hello"));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getParentConceptId(), is("1234"));
		assertThat(result.getParentConceptLabel(), is("label"));
		assertThat(result.getParentGroupId(), is("1234"));
		assertThat(result.getParentGroupLabel(), is("label"));
		assertThat(result.getThesaurusId(), is("1234"));
		assertThat(result.getType(), is("text/plain"));
	}

	@Test
	void getAllConceptGroupsByThesaurusId() {

		// arrange
		List<ThesaurusConceptGroupView> list1 =
			 new ArrayList<ThesaurusConceptGroupView>();
		when(thesaurusConceptGroupViewConverter.convert(Mockito.<List<ThesaurusConceptGroup>>any()))
			.thenReturn(list1);
		when(thesaurusConceptGroupService.getAllThesaurusConceptGroupsByThesaurusId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConceptGroup>());

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptGroupView>> result =
			 service.getAllConceptGroupsByThesaurusId("1234", "1234");

		// assert
		assertThat(result.getData(), sameInstance(list1));
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAllConceptGroupsByThesaurusIdExcludedConceptGroupIdIsEmpty() {

		// arrange
		List<ThesaurusConceptGroupView> list1 =
			 new ArrayList<ThesaurusConceptGroupView>();
		when(thesaurusConceptGroupViewConverter.convert(Mockito.<List<ThesaurusConceptGroup>>any()))
			.thenReturn(list1);
		List<ThesaurusConceptGroup> list2 = new ArrayList<ThesaurusConceptGroup>();
		list2.add(new ThesaurusConceptGroup());
		when(thesaurusConceptGroupService.getAllThesaurusConceptGroupsByThesaurusId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(list2);

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptGroupView>> result =
			 service.getAllConceptGroupsByThesaurusId("", "1234");

		// assert
		assertThat(result.getData(), sameInstance(list1));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void destroyConceptGroup() {
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		when(thesaurusConceptGroupViewConverter.convert(Mockito.<ThesaurusConceptGroupView>any()))
			.thenReturn(new ThesaurusConceptGroup());
		when(thesaurusConceptGroupService.destroyThesaurusConceptGroup(Mockito.<ThesaurusConceptGroup>any()))
			.thenReturn(new ThesaurusConceptGroup());
		service.destroyConceptGroup(new ThesaurusConceptGroupView());
	}
}

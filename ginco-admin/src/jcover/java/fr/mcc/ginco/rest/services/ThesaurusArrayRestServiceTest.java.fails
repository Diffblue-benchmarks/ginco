package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.NodeLabel;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusArrayConcept;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusArrayConceptView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusArrayView;
import fr.mcc.ginco.extjs.view.utils.NodeLabelViewConverter;
import fr.mcc.ginco.extjs.view.utils.ThesaurusArrayConceptViewConverter;
import fr.mcc.ginco.extjs.view.utils.ThesaurusArrayViewConverter;
import fr.mcc.ginco.services.IThesaurusArrayService;
import fr.mcc.ginco.services.IThesaurusService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusArrayRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusArrayRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusArrayRestServiceTest {

	@MockBean(name = "nodeLabelViewConverter")
	private NodeLabelViewConverter nodeLabelViewConverter;

	@MockBean(name = "thesaurusArrayConceptViewConverter")
	private ThesaurusArrayConceptViewConverter thesaurusArrayConceptViewConverter;

	@MockBean(name = "thesaurusArrayService")
	private IThesaurusArrayService thesaurusArrayService;

	@MockBean(name = "thesaurusArrayViewConverter")
	private ThesaurusArrayViewConverter thesaurusArrayViewConverter;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ThesaurusArrayRestService service;

	@Test
	void getThesaurusArrayById() {

		// arrange
		ThesaurusArrayView thesaurusArrayView = new ThesaurusArrayView();
		ArrayList<ThesaurusArrayConceptView> concepts1 =
			 new ArrayList<ThesaurusArrayConceptView>();
		ThesaurusArrayConceptView thesaurusArrayConceptView =
			 new ThesaurusArrayConceptView();
		concepts1.add(thesaurusArrayConceptView);
		thesaurusArrayView.setConcepts(concepts1);
		thesaurusArrayView.setCreated("foo");
		thesaurusArrayView.setIdentifier("data");
		thesaurusArrayView.setLabel("label");
		thesaurusArrayView.setLanguage("foo");
		thesaurusArrayView.setModified("foo");
		thesaurusArrayView.setNodeLabelId(1);
		thesaurusArrayView.setOrder(false);
		thesaurusArrayView.setParentArrayId("1234");
		thesaurusArrayView.setParentArrayLabel("label");
		thesaurusArrayView.setSuperOrdinateId("1234");
		thesaurusArrayView.setSuperOrdinateLabel("label");
		thesaurusArrayView.setThesaurusId("1234");
		when(thesaurusArrayViewConverter.convert(Mockito.<ThesaurusArray>any()))
			.thenReturn(thesaurusArrayView);
		when(thesaurusArrayService.getThesaurusArrayById(Mockito.<String>any()))
			.thenReturn(new ThesaurusArray());

		// act
		ThesaurusArrayView result = service.getThesaurusArrayById("1234");

		// assert
		assertThat(result.getConcepts().size(), is(1));
		assertThat(result.getConcepts().get(0), sameInstance(thesaurusArrayConceptView));
		assertThat(result.getCreated(), is("foo"));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLabel(), is("label"));
		assertThat(result.getLanguage(), is("foo"));
		assertThat(result.getModified(), is("foo"));
		assertThat(result.getNodeLabelId(), is(1));
		assertThat(result.getOrder(), is(false));
		assertThat(result.getParentArrayId(), is("1234"));
		assertThat(result.getParentArrayLabel(), is("label"));
		assertThat(result.getSuperOrdinateId(), is("1234"));
		assertThat(result.getSuperOrdinateLabel(), is("label"));
		assertThat(result.getThesaurusId(), is("1234"));
	}

	@Test
	void getAllConceptArraysByThesaurusId() {

		// arrange
		List<ThesaurusArrayView> list1 = new ArrayList<ThesaurusArrayView>();
		when(thesaurusArrayViewConverter.convert(Mockito.<List<ThesaurusArray>>any()))
			.thenReturn(list1);
		when(thesaurusArrayService.getAllThesaurusArrayByThesaurusId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusArray>());

		// act
		ExtJsonFormLoadData<List<ThesaurusArrayView>> result =
			 service.getAllConceptArraysByThesaurusId("1234", "1234");

		// assert
		assertThat(result.getData(), sameInstance(list1));
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void updateThesaurusArray() {

		// arrange
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		ThesaurusArrayView thesaurusArrayView = new ThesaurusArrayView();
		ArrayList<ThesaurusArrayConceptView> concepts1 =
			 new ArrayList<ThesaurusArrayConceptView>();
		ThesaurusArrayConceptView thesaurusArrayConceptView1 =
			 new ThesaurusArrayConceptView();
		concepts1.add(thesaurusArrayConceptView1);
		thesaurusArrayView.setConcepts(concepts1);
		thesaurusArrayView.setCreated("foo");
		thesaurusArrayView.setIdentifier("data");
		thesaurusArrayView.setLabel("label");
		thesaurusArrayView.setLanguage("foo");
		thesaurusArrayView.setModified("foo");
		thesaurusArrayView.setNodeLabelId(1);
		thesaurusArrayView.setOrder(false);
		thesaurusArrayView.setParentArrayId("1234");
		thesaurusArrayView.setParentArrayLabel("label");
		thesaurusArrayView.setSuperOrdinateId("1234");
		thesaurusArrayView.setSuperOrdinateLabel("label");
		thesaurusArrayView.setThesaurusId("1234");
		when(thesaurusArrayViewConverter.convert(Mockito.<ThesaurusArray>any()))
			.thenReturn(thesaurusArrayView);
		when(thesaurusArrayViewConverter.convert(Mockito.<ThesaurusArrayView>any()))
			.thenReturn(new ThesaurusArray());
		when(thesaurusArrayService.updateThesaurusArray(Mockito.<ThesaurusArray>any(), Mockito.<NodeLabel>any(), Mockito.<List<ThesaurusArrayConcept>>any()))
			.thenReturn(new ThesaurusArray());
		when(thesaurusArrayConceptViewConverter.convert(Mockito.<ThesaurusArrayConceptView>any(), Mockito.<ThesaurusArray>any()))
			.thenReturn(new ThesaurusArrayConcept());
		when(nodeLabelViewConverter.convert(Mockito.<ThesaurusArrayView>any()))
			.thenReturn(new NodeLabel());
		ThesaurusArrayView thesaurusArrayViewJAXBElement = new ThesaurusArrayView();
		ArrayList<ThesaurusArrayConceptView> concepts13 =
			 new ArrayList<ThesaurusArrayConceptView>();
		concepts13.add(new ThesaurusArrayConceptView());
		thesaurusArrayViewJAXBElement.setConcepts(concepts13);

		// act
		ThesaurusArrayView result =
			 service.updateThesaurusArray(thesaurusArrayViewJAXBElement);

		// assert
		assertThat(result.getConcepts().size(), is(1));
		assertThat(result.getConcepts().get(0), sameInstance(thesaurusArrayConceptView1));
		assertThat(result.getCreated(), is("foo"));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLabel(), is("label"));
		assertThat(result.getLanguage(), is("foo"));
		assertThat(result.getModified(), is("foo"));
		assertThat(result.getNodeLabelId(), is(1));
		assertThat(result.getOrder(), is(false));
		assertThat(result.getParentArrayId(), is("1234"));
		assertThat(result.getParentArrayLabel(), is("label"));
		assertThat(result.getSuperOrdinateId(), is("1234"));
		assertThat(result.getSuperOrdinateLabel(), is("label"));
		assertThat(result.getThesaurusId(), is("1234"));
	}

	@Test
	void destroyArray() {
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		when(thesaurusArrayViewConverter.convert(Mockito.<ThesaurusArrayView>any()))
			.thenReturn(new ThesaurusArray());
		when(thesaurusArrayService.destroyThesaurusArray(Mockito.<ThesaurusArray>any()))
			.thenReturn(new ThesaurusArray());
		service.destroyArray(new ThesaurusArrayView());
	}
}

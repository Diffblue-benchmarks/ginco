package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.anEmptyMap;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.exports.IExportService;
import fr.mcc.ginco.exports.IGincoBranchExportService;
import fr.mcc.ginco.exports.IGincoThesaurusExportService;
import fr.mcc.ginco.exports.ISKOSExportService;
import fr.mcc.ginco.exports.result.bean.FormattedLine;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;

import java.util.ArrayList;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ExportRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ExportRestService.class})
@ExtendWith(SpringExtension.class)
class ExportRestServiceTest {

	@MockBean(name = "exportService")
	private IExportService exportService;

	@MockBean(name = "gincoBranchExportService")
	private IGincoBranchExportService gincoBranchExportService;

	@MockBean(name = "gincoThesaurusExportService")
	private IGincoThesaurusExportService gincoThesaurusExportService;

	@MockBean(name = "skosExportService")
	private ISKOSExportService skosExportService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ExportRestService service;

	@Test
	void getHierarchical() {

		// arrange
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setTitle("Mr");
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus);
		ArrayList<FormattedLine> formattedLineList = new ArrayList<FormattedLine>();
		formattedLineList.add(new FormattedLine(1, "hello"));
		when(exportService.getHierarchicalText(Mockito.<Thesaurus>any()))
			.thenReturn(formattedLineList);

		// act
		Response result = service.getHierarchical("1234");

		// assert
		assertThat(result.getCookies(), anEmptyMap());
		assertThat(result.getMediaType(), is(nullValue()));
		assertThat(result.getStatus(), is(200));
	}

	@Test
	void getAlphabetical() {

		// arrange
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setTitle("Mr");
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus);
		ArrayList<FormattedLine> formattedLineList = new ArrayList<FormattedLine>();
		formattedLineList.add(new FormattedLine(1, "hello"));
		when(exportService.getAlphabeticalText(Mockito.<Thesaurus>any()))
			.thenReturn(formattedLineList);

		// act
		Response result = service.getAlphabetical("1234");

		// assert
		assertThat(result.getCookies(), anEmptyMap());
		assertThat(result.getMediaType(), is(nullValue()));
		assertThat(result.getStatus(), is(200));
	}

	@Test
	void getGincoThesaurusExport() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(new Thesaurus());
		when(gincoThesaurusExportService.getThesaurusExport(Mockito.<Thesaurus>any()))
			.thenReturn("foo");
		Response result = service.getGincoThesaurusExport("1234");
		assertThat(result.getCookies(), anEmptyMap());
		assertThat(result.getMediaType(), is(nullValue()));
		assertThat(result.getStatus(), is(200));
	}

	@Test
	void getGincoBranchExport() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusConceptService.getConceptTitle(Mockito.<ThesaurusConcept>any()))
			.thenReturn("Mr");
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(new ThesaurusConcept());
		when(gincoBranchExportService.getBranchExport(Mockito.<ThesaurusConcept>any()))
			.thenReturn("Acme");
		Response result = service.getGincoBranchExport("1234");
		assertThat(result.getCookies(), anEmptyMap());
		assertThat(result.getMediaType(), is(nullValue()));
		assertThat(result.getStatus(), is(200));
	}
}

package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusStatistics;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusView;
import fr.mcc.ginco.extjs.view.utils.ThesaurusViewConverter;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.IThesaurusFormatService;
import fr.mcc.ginco.services.IThesaurusOrganizationService;
import fr.mcc.ginco.services.IThesaurusService;
import fr.mcc.ginco.services.IThesaurusStatisticsService;
import fr.mcc.ginco.services.IThesaurusTypeService;
import fr.mcc.ginco.services.IThesaurusVersionHistoryService;
import fr.mcc.ginco.solr.IThesaurusIndexerService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusRestServiceTest {

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "thesaurusFormatService")
	private IThesaurusFormatService thesaurusFormatService;

	@MockBean(name = "thesaurusIndexerService")
	private IThesaurusIndexerService thesaurusIndexerService;

	@MockBean(name = "thesaurusOrganizationService")
	private IThesaurusOrganizationService thesaurusOrganizationService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@MockBean(name = "thesaurusStatisticsService")
	private IThesaurusStatisticsService thesaurusStatisticsService;

	@MockBean(name = "thesaurusTypeService")
	private IThesaurusTypeService thesaurusTypeService;

	@MockBean(name = "thesaurusVersionHistoryService")
	private IThesaurusVersionHistoryService thesaurusVersionHistoryService;

	@MockBean(name = "thesaurusViewConverter")
	private ThesaurusViewConverter thesaurusViewConverter;

	@Autowired
	private ThesaurusRestService service;

	@Test
	void getAllThesaurusTypes() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<ThesaurusType> list = new ArrayList<ThesaurusType>();
		ThesaurusType thesaurusType = new ThesaurusType();
		list.add(thesaurusType);
		when(thesaurusTypeService.getThesaurusTypeList())
			.thenReturn(list);

		// act
		List<ThesaurusType> result = service.getAllThesaurusTypes();

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0), sameInstance(thesaurusType));
	}

	@Test
	void getTopLanguages() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<Language> list = new ArrayList<Language>();
		when(thesaurusService.getThesaurusLanguages(Mockito.<String>any()))
			.thenReturn(list);

		// act
		ExtJsonFormLoadData<List<Language>> result = service.getTopLanguages("1234");

		// assert
		assertThat(result.getData(), sameInstance(list));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getTopLanguagesThesaurusIdIsEmpty() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<Language> list2 = new ArrayList<Language>();
		when(languagesService.getTopLanguagesList())
			.thenReturn(list2);

		// act
		ExtJsonFormLoadData<List<Language>> result = service.getTopLanguages("");

		// assert
		assertThat(result.getData(), sameInstance(list2));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAllThesaurusFormats() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<ThesaurusFormat> list = new ArrayList<ThesaurusFormat>();
		ThesaurusFormat thesaurusFormat = new ThesaurusFormat();
		list.add(thesaurusFormat);
		when(thesaurusFormatService.getThesaurusFormatList())
			.thenReturn(list);

		// act
		List<ThesaurusFormat> result = service.getAllThesaurusFormats();

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0), sameInstance(thesaurusFormat));
	}

	@Test
	void getVocabularyById() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		ThesaurusView thesaurusView = new ThesaurusView();
		thesaurusView.setArchived(false);
		thesaurusView.setCanBeDeleted(false);
		thesaurusView.setContributor("foo");
		thesaurusView.setCoverage("foo");
		thesaurusView.setCreated("foo");
		thesaurusView.setCreatorEmail("info@diffblue.com");
		thesaurusView.setCreatorHomepage("+");
		thesaurusView.setCreatorName("Acme");
		thesaurusView.setDate("1999-12-31");
		thesaurusView.setDefaultTopConcept(false);
		thesaurusView.setDescription("some text");
		ArrayList<Integer> formats = new ArrayList<Integer>();
		formats.add(1);
		thesaurusView.setFormats(formats);
		thesaurusView.setId("1234");
		ArrayList<String> lang1 = new ArrayList<String>();
		lang1.add("foo");
		thesaurusView.setLanguages(lang1);
		thesaurusView.setPolyHierarchical(false);
		thesaurusView.setPublisher("foo");
		thesaurusView.setRelation("DE");
		thesaurusView.setRights("foo");
		thesaurusView.setSource("foo");
		thesaurusView.setSubject("foo");
		thesaurusView.setTitle("Mr");
		thesaurusView.setType(1);
		when(thesaurusViewConverter.convert(Mockito.<Thesaurus>any()))
			.thenReturn(thesaurusView);
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(new Thesaurus());

		// act
		ThesaurusView result = service.getVocabularyById("1234");

		// assert
		assertThat(result.getArchived(), is(false));
		assertThat(result.getCanBeDeleted(), is(false));
		assertThat(result.getContributor(), is("foo"));
		assertThat(result.getCoverage(), is("foo"));
		assertThat(result.getCreated(), is("foo"));
		assertThat(result.getCreatorEmail(), is("info@diffblue.com"));
		assertThat(result.getCreatorHomepage(), is("+"));
		assertThat(result.getCreatorName(), is("Acme"));
		assertThat(result.getDate(), is("1999-12-31"));
		assertThat(result.getDefaultTopConcept(), is(false));
		assertThat(result.getDescription(), is("some text"));
		assertThat(result.getFormats(), hasSize(1));
		assertThat(result.getFormats().get(0), is(1));
		assertThat(result.getId(), is("1234"));
		assertThat(result.getLanguages(), hasSize(1));
		assertThat(result.getLanguages().get(0), is("foo"));
		assertThat(result.getPolyHierarchical(), is(false));
		assertThat(result.getPublisher(), is("foo"));
		assertThat(result.getRelation(), is("DE"));
		assertThat(result.getRights(), is("foo"));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getSubject(), is("foo"));
		assertThat(result.getThesaurusId(), is("1234"));
		assertThat(result.getTitle(), is("Mr"));
		assertThat(result.getType(), is(1));
	}

	@Test
	void getVocabularies() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		ThesaurusView thesaurusView = new ThesaurusView();
		when(thesaurusViewConverter.convert(Mockito.<Thesaurus>any()))
			.thenReturn(thesaurusView);
		List<Thesaurus> list = new ArrayList<Thesaurus>();
		list.add(new Thesaurus());
		when(thesaurusService.getThesaurusList())
			.thenReturn(list);

		// act
		ExtJsonFormLoadData<List<ThesaurusView>> result = service.getVocabularies();

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusView));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void updateVocabulary() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		ThesaurusView thesaurusView = new ThesaurusView();
		thesaurusView.setArchived(false);
		thesaurusView.setCanBeDeleted(false);
		thesaurusView.setContributor("foo");
		thesaurusView.setCoverage("foo");
		thesaurusView.setCreated("foo");
		thesaurusView.setCreatorEmail("info@diffblue.com");
		thesaurusView.setCreatorHomepage("+");
		thesaurusView.setCreatorName("Acme");
		thesaurusView.setDate("1999-12-31");
		thesaurusView.setDefaultTopConcept(false);
		thesaurusView.setDescription("some text");
		ArrayList<Integer> formats1 = new ArrayList<Integer>();
		formats1.add(1);
		thesaurusView.setFormats(formats1);
		thesaurusView.setId("1234");
		ArrayList<String> lang1 = new ArrayList<String>();
		lang1.add("foo");
		thesaurusView.setLanguages(lang1);
		thesaurusView.setPolyHierarchical(false);
		thesaurusView.setPublisher("foo");
		thesaurusView.setRelation("DE");
		thesaurusView.setRights("foo");
		thesaurusView.setSource("foo");
		thesaurusView.setSubject("foo");
		thesaurusView.setTitle("Mr");
		thesaurusView.setType(1);
		when(thesaurusViewConverter.convert(Mockito.<Thesaurus>any()))
			.thenReturn(thesaurusView);
		when(thesaurusViewConverter.convert(Mockito.<ThesaurusView>any()))
			.thenReturn(new Thesaurus());
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setTitle("Mr");
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus3);
		when(thesaurusService.updateThesaurus(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());

		// act
		ThesaurusView result = service.updateVocabulary(new ThesaurusView());

		// assert
		assertThat(result.getArchived(), is(false));
		assertThat(result.getCanBeDeleted(), is(false));
		assertThat(result.getContributor(), is("foo"));
		assertThat(result.getCoverage(), is("foo"));
		assertThat(result.getCreated(), is("foo"));
		assertThat(result.getCreatorEmail(), is("info@diffblue.com"));
		assertThat(result.getCreatorHomepage(), is("+"));
		assertThat(result.getCreatorName(), is("Acme"));
		assertThat(result.getDate(), is("1999-12-31"));
		assertThat(result.getDefaultTopConcept(), is(false));
		assertThat(result.getDescription(), is("some text"));
		assertThat(result.getFormats(), hasSize(1));
		assertThat(result.getFormats().get(0), is(1));
		assertThat(result.getId(), is("1234"));
		assertThat(result.getLanguages(), hasSize(1));
		assertThat(result.getLanguages().get(0), is("foo"));
		assertThat(result.getPolyHierarchical(), is(false));
		assertThat(result.getPublisher(), is("foo"));
		assertThat(result.getRelation(), is("DE"));
		assertThat(result.getRights(), is("foo"));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getSubject(), is("foo"));
		assertThat(result.getThesaurusId(), is("1234"));
		assertThat(result.getTitle(), is("Mr"));
		assertThat(result.getType(), is(1));
	}

	@Test
	void destroyVocabulary() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setIdentifier("data");
		when(thesaurusViewConverter.convert(Mockito.<ThesaurusView>any()))
			.thenReturn(thesaurus1);
		when(thesaurusService.destroyThesaurus(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());

		// act
		service.destroyVocabulary(new ThesaurusView());

		// assert
		Mockito.verify(thesaurusIndexerService).removeThesaurusIndex(ArgumentMatchers.eq("data"));
	}

	@Test
	void publishVocabulary() throws java.text.ParseException, fr.mcc.ginco.exceptions.TechnicalException, java.io.IOException {
		when(thesaurusVersionHistoryService.publishThesaurus(Mockito.<Thesaurus>any(), Mockito.<String>any()))
			.thenReturn(new ThesaurusVersionHistory());
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setArchived(false);
		thesaurus3.setContributor("foo");
		thesaurus3.setCoverage("foo");
		thesaurus3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator3 = new ThesaurusOrganization();
		creator3.setEmail("info@diffblue.com");
		creator3.setHomepage("foo");
		creator3.setIdentifier(1);
		creator3.setName("Acme");
		thesaurus3.setCreator(creator3);
		thesaurus3.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setDefaultTopConcept(false);
		thesaurus3.setDescription("some text");
		thesaurus3.setIdentifier("data");
		thesaurus3.setPolyHierarchical(false);
		thesaurus3.setPublisher("foo");
		thesaurus3.setRelation("DE");
		thesaurus3.setRights("foo");
		thesaurus3.setSource("foo");
		thesaurus3.setSubject("foo");
		thesaurus3.setTitle("Mr");
		ThesaurusType type3 = new ThesaurusType();
		type3.setIdentifier(1);
		type3.setLabel("label");
		thesaurus3.setType(type3);
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus3);
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		assertThat(service.publishVocabulary("1234", "root"), is("{\"success\":true,\"data\":{\"identifier\":\"data\",\"contributor\":\"foo\",\"coverage\":\"foo\",\"date\":1293753600000,\"description\":\"some text\",\"publisher\":\"foo\",\"relation\":\"DE\",\"rights\":\"foo\",\"source\":\"foo\",\"subject\":\"foo\",\"title\":\"Mr\",\"created\":1293753600000,\"defaultTopConcept\":false,\"archived\":false,\"type\":{\"identifier\":1,\"label\":\"label\"},\"creator\":{\"identifier\":1,\"name\":\"Acme\",\"homepage\":\"foo\",\"email\":\"info@diffblue.com\"},\"polyHierarchical\":false,\"format\":[],\"thesaurusId\":\"data\"},\"total\":null}"));
		Mockito.verify(thesaurusService).publishThesaurus(ArgumentMatchers.<Thesaurus>any());
	}

	@Test
	void archiveVocabulary() throws fr.mcc.ginco.exceptions.TechnicalException, java.io.IOException {
		ThesaurusView thesaurusView = new ThesaurusView();
		thesaurusView.setArchived(false);
		thesaurusView.setCanBeDeleted(false);
		thesaurusView.setContributor("foo");
		thesaurusView.setCoverage("foo");
		thesaurusView.setCreated("foo");
		thesaurusView.setCreatorEmail("info@diffblue.com");
		thesaurusView.setCreatorHomepage("+");
		thesaurusView.setCreatorName("Acme");
		thesaurusView.setDate("1999-12-31");
		thesaurusView.setDefaultTopConcept(false);
		thesaurusView.setDescription("some text");
		ArrayList<Integer> formats = new ArrayList<Integer>();
		formats.add(1);
		thesaurusView.setFormats(formats);
		thesaurusView.setId("1234");
		ArrayList<String> lang1 = new ArrayList<String>();
		lang1.add("foo");
		thesaurusView.setLanguages(lang1);
		thesaurusView.setPolyHierarchical(false);
		thesaurusView.setPublisher("foo");
		thesaurusView.setRelation("DE");
		thesaurusView.setRights("foo");
		thesaurusView.setSource("foo");
		thesaurusView.setSubject("foo");
		thesaurusView.setTitle("Mr");
		thesaurusView.setType(1);
		when(thesaurusViewConverter.convert(Mockito.<Thesaurus>any()))
			.thenReturn(thesaurusView);
		when(thesaurusService.archiveThesaurus(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(new Thesaurus());
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		assertThat(service.archiveVocabulary("1234"), is("{\"success\":true,\"data\":{\"id\":\"1234\",\"contributor\":\"foo\",\"coverage\":\"foo\",\"date\":\"1999-12-31\",\"description\":\"some text\",\"publisher\":\"foo\",\"relation\":\"DE\",\"rights\":\"foo\",\"source\":\"foo\",\"subject\":\"foo\",\"title\":\"Mr\",\"created\":\"foo\",\"defaultTopConcept\":false,\"archived\":false,\"canBeDeleted\":false,\"type\":1,\"creatorName\":\"Acme\",\"creatorHomepage\":\"+\",\"creatorEmail\":\"info@diffblue.com\",\"polyHierarchical\":false,\"languages\":[\"foo\"],\"formats\":[1],\"thesaurusId\":\"1234\"},\"total\":null}"));
	}

	@Test
	void getAllAuthors() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<ThesaurusOrganization> list = new ArrayList<ThesaurusOrganization>();
		ThesaurusOrganization thesaurusOrganization = new ThesaurusOrganization();
		list.add(thesaurusOrganization);
		when(thesaurusOrganizationService.getOrganizationsWithData())
			.thenReturn(list);

		// act
		List<ThesaurusOrganization> result = service.getAllAuthors();

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0), sameInstance(thesaurusOrganization));
	}

	@Test
	void getStatistics() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		ThesaurusStatistics thesaurusStatistics = new ThesaurusStatistics("1234");
		thesaurusStatistics.setNbOfComplexConcepts(1);
		thesaurusStatistics.setNbOfConcepts(1);
		thesaurusStatistics.setNbOfConceptsAlignedToExtThes(1);
		thesaurusStatistics.setNbOfConceptsAlignedToIntThes(1);
		thesaurusStatistics.setNbOfConceptsAlignedToMyThes(1);
		thesaurusStatistics.setNbOfConceptsWoNotes(1);
		thesaurusStatistics.setNbOfNonPreferredTerms(1);
		thesaurusStatistics.setNbOfTerms(1);
		thesaurusStatistics.setNbOfTermsWoNotes(1);
		thesaurusStatistics.setNbOfThesaurusArrays(1);
		thesaurusStatistics.setNbOfThesaurusGroups(1);
		thesaurusStatistics.setThesaurusId("1234");
		when(thesaurusStatisticsService.getStatistics(Mockito.<String>any()))
			.thenReturn(thesaurusStatistics);

		// act
		ExtJsonFormLoadData result = service.getStatistics("1234");

		// assert
		assertThat((ThesaurusStatistics) result.getData(), sameInstance(thesaurusStatistics));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}
}

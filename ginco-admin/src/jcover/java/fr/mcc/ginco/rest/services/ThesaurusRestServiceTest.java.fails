package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusStatistics;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusView;
import fr.mcc.ginco.extjs.view.utils.ThesaurusViewConverter;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.IThesaurusFormatService;
import fr.mcc.ginco.services.IThesaurusOrganizationService;
import fr.mcc.ginco.services.IThesaurusService;
import fr.mcc.ginco.services.IThesaurusStatisticsService;
import fr.mcc.ginco.services.IThesaurusTypeService;
import fr.mcc.ginco.services.IThesaurusVersionHistoryService;
import fr.mcc.ginco.solr.IThesaurusIndexerService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusRestServiceTest {

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "thesaurusFormatService")
	private IThesaurusFormatService thesaurusFormatService;

	@MockBean(name = "thesaurusIndexerService")
	private IThesaurusIndexerService thesaurusIndexerService;

	@MockBean(name = "thesaurusOrganizationService")
	private IThesaurusOrganizationService thesaurusOrganizationService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@MockBean(name = "thesaurusStatisticsService")
	private IThesaurusStatisticsService thesaurusStatisticsService;

	@MockBean(name = "thesaurusTypeService")
	private IThesaurusTypeService thesaurusTypeService;

	@MockBean(name = "thesaurusVersionHistoryService")
	private IThesaurusVersionHistoryService thesaurusVersionHistoryService;

	@MockBean(name = "thesaurusViewConverter")
	private ThesaurusViewConverter thesaurusViewConverter;

	@Autowired
	private ThesaurusRestService service;

	@Test
	void getAllAuthorsReturnsEmpty() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusOrganizationService.getOrganizationsWithData())
			.thenReturn(new ArrayList<ThesaurusOrganization>());
		assertThat(service.getAllAuthors(), empty());
	}

	@Test
	void getAllThesaurusFormatsReturnsEmpty() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusFormatService.getThesaurusFormatList())
			.thenReturn(new ArrayList<ThesaurusFormat>());
		assertThat(service.getAllThesaurusFormats(), empty());
	}

	@Test
	void getAllThesaurusTypesReturnsEmpty() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusTypeService.getThesaurusTypeList())
			.thenReturn(new ArrayList<ThesaurusType>());
		assertThat(service.getAllThesaurusTypes(), empty());
	}

	@Test
	void getStatistics() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		ThesaurusStatistics thesaurusStatistics = new ThesaurusStatistics("1234");
		thesaurusStatistics.setNbOfComplexConcepts(1);
		thesaurusStatistics.setNbOfConcepts(1);
		thesaurusStatistics.setNbOfConceptsAlignedToExtThes(1);
		thesaurusStatistics.setNbOfConceptsAlignedToIntThes(1);
		thesaurusStatistics.setNbOfConceptsAlignedToMyThes(1);
		thesaurusStatistics.setNbOfConceptsWoNotes(1);
		thesaurusStatistics.setNbOfNonPreferredTerms(1);
		thesaurusStatistics.setNbOfTerms(1);
		thesaurusStatistics.setNbOfTermsWoNotes(1);
		thesaurusStatistics.setNbOfThesaurusArrays(1);
		thesaurusStatistics.setNbOfThesaurusGroups(1);
		thesaurusStatistics.setThesaurusId("1234");
		when(thesaurusStatisticsService.getStatistics(Mockito.<String>any()))
			.thenReturn(thesaurusStatistics);

		// act
		ExtJsonFormLoadData result = service.getStatistics("1234");

		// assert
		assertThat((ThesaurusStatistics) result.getData(), sameInstance(thesaurusStatistics));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getTopLanguages() throws fr.mcc.ginco.exceptions.TechnicalException {

		// arrange
		List<Language> list = new ArrayList<Language>();
		when(thesaurusService.getThesaurusLanguages(Mockito.<String>any()))
			.thenReturn(list);

		// act
		ExtJsonFormLoadData<List<Language>> result = service.getTopLanguages("1234");

		// assert
		assertThat(result.getData(), sameInstance(list));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getVocabularies() throws fr.mcc.ginco.exceptions.TechnicalException {
		when(thesaurusService.getThesaurusList())
			.thenReturn(new ArrayList<Thesaurus>());
		ExtJsonFormLoadData<List<ThesaurusView>> result = service.getVocabularies();
		assertThat(result.getData(), empty());
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}
}

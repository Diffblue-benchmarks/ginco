package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.UserRole;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.RoleView;
import fr.mcc.ginco.extjs.view.pojo.UserRoleView;
import fr.mcc.ginco.extjs.view.utils.UserRoleViewConverter;
import fr.mcc.ginco.services.IAdminUserService;
import fr.mcc.ginco.services.IUserRoleService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.UserRoleRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {UserRoleRestService.class})
@ExtendWith(SpringExtension.class)
class UserRoleRestServiceTest {

	@MockBean(name = "adminUserService")
	private IAdminUserService adminUserService;

	@MockBean(name = "userRoleService")
	private IUserRoleService userRoleService;

	@MockBean(name = "userRoleViewConverter")
	private UserRoleViewConverter userRoleViewConverter;

	@Autowired
	private UserRoleRestService service;

	@Test
	void deleteThesaurusUsers() {

		// arrange
		when(userRoleViewConverter.convert(Mockito.<UserRoleView>any()))
			.thenReturn(new UserRole());
		ArrayList<UserRoleView> userRoleViews = new ArrayList<UserRoleView>();
		userRoleViews.add(new UserRoleView());

		// act
		service.deleteThesaurusUsers(userRoleViews);

		// assert
		Mockito.verify(userRoleService).deleteUserRole(ArgumentMatchers.<UserRole>any());
	}

	@Test
	void deleteThesaurusUsersUserRoleViewsIsEmpty() {
		service.deleteThesaurusUsers(new ArrayList<UserRoleView>());
	}

	@Test
	void getAvailableRoles() {
		ExtJsonFormLoadData<List<RoleView>> result = service.getAvailableRoles();
		assertThat(result.getData().size(), is(2));
		assertThat(result.getData().get(0).getRole(), is(0));
		assertThat(result.getData().get(0).getRoleLabel(), is("Responsable op√©rationnel"));
		assertThat(result.getData().get(1).getRole(), is(1));
		assertThat(result.getData().get(1).getRoleLabel(), is("Expert"));
		assertThat(result.getTotal(), is(2L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getThesaurusUsersIdThesaurusIsRoot() {
		when(userRoleService.getThesaurusUsers(Mockito.<String>any()))
			.thenReturn(new ArrayList<UserRole>());
		ExtJsonFormLoadData<List<UserRoleView>> result =
			 service.getThesaurusUsers("root");
		assertThat(result.getData(), empty());
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void updateThesaurusUsersUserRoleViewsIsEmpty() {
		ExtJsonFormLoadData<List<UserRoleView>> result =
			 service.updateThesaurusUsers(new ArrayList<UserRoleView>());
		assertThat(result.getData(), empty());
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}
}

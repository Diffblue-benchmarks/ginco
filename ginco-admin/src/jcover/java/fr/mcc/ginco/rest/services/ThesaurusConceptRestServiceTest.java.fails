package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Note;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.AlignmentView;
import fr.mcc.ginco.extjs.view.pojo.AssociativeRelationshipView;
import fr.mcc.ginco.extjs.view.pojo.GenericRoleView;
import fr.mcc.ginco.extjs.view.pojo.GenericStatusView;
import fr.mcc.ginco.extjs.view.pojo.HierarchicalRelationshipView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptReducedView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusTermView;
import fr.mcc.ginco.extjs.view.utils.AlignmentViewConverter;
import fr.mcc.ginco.extjs.view.utils.AssociativeRelationshipViewConverter;
import fr.mcc.ginco.extjs.view.utils.HierarchicalRelationshipViewConverter;
import fr.mcc.ginco.extjs.view.utils.TermViewConverter;
import fr.mcc.ginco.extjs.view.utils.ThesaurusConceptViewConverter;
import fr.mcc.ginco.services.INoteService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;
import fr.mcc.ginco.services.IThesaurusTermService;
import fr.mcc.ginco.services.IUserRoleService;
import fr.mcc.ginco.solr.IConceptIndexerService;
import fr.mcc.ginco.solr.INoteIndexerService;
import fr.mcc.ginco.solr.ITermIndexerService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusConceptRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusConceptRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusConceptRestServiceTest {

	@MockBean(name = "alignmentViewConverter")
	private AlignmentViewConverter alignmentViewConverter;

	@MockBean(name = "associativeRelationshipViewConverter")
	private AssociativeRelationshipViewConverter associativeRelationshipViewConverter;

	@MockBean(name = "conceptIndexerService")
	private IConceptIndexerService conceptIndexerService;

	@MockBean(name = "hierarchicalRelationshipViewConverter")
	private HierarchicalRelationshipViewConverter hierarchicalRelationshipViewConverter;

	@MockBean(name = "noteIndexerService")
	private INoteIndexerService noteIndexerService;

	@MockBean(name = "noteService")
	private INoteService noteService;

	@MockBean(name = "termIndexerService")
	private ITermIndexerService termIndexerService;

	@MockBean(name = "termViewConverter")
	private TermViewConverter termViewConverter;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusConceptViewConverter")
	private ThesaurusConceptViewConverter thesaurusConceptViewConverter;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@MockBean(name = "userRoleService")
	private IUserRoleService userRoleService;

	@Autowired
	private ThesaurusConceptRestService service;

	@Test
	void getConceptById() {

		// arrange
		when(thesaurusTermService.getTermsByConceptId(Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusTerm>());
		ThesaurusConceptView thesaurusConceptView = new ThesaurusConceptView();
		ArrayList<AlignmentView> alignments = new ArrayList<AlignmentView>();
		AlignmentView alignmentView = new AlignmentView();
		alignments.add(alignmentView);
		thesaurusConceptView.setAlignments(alignments);
		ArrayList<AssociativeRelationshipView> associatedConcepts =
			 new ArrayList<AssociativeRelationshipView>();
		AssociativeRelationshipView associativeRelationshipView =
			 new AssociativeRelationshipView();
		associatedConcepts.add(associativeRelationshipView);
		thesaurusConceptView.setAssociatedConcepts(associatedConcepts);
		ArrayList<HierarchicalRelationshipView> childConcepts =
			 new ArrayList<HierarchicalRelationshipView>();
		HierarchicalRelationshipView hierarchicalRelationshipView1 =
			 new HierarchicalRelationshipView();
		childConcepts.add(hierarchicalRelationshipView1);
		thesaurusConceptView.setChildConcepts(childConcepts);
		ArrayList<String> conceptsPath1 = new ArrayList<String>();
		conceptsPath1.add("/bin/bash");
		thesaurusConceptView.setConceptsPath(conceptsPath1);
		thesaurusConceptView.setCreated("someone");
		thesaurusConceptView.setIdentifier("data");
		thesaurusConceptView.setModified("someone");
		thesaurusConceptView.setNotation("DE");
		ArrayList<HierarchicalRelationshipView> parentConcepts1 =
			 new ArrayList<HierarchicalRelationshipView>();
		HierarchicalRelationshipView hierarchicalRelationshipView2 =
			 new HierarchicalRelationshipView();
		parentConcepts1.add(hierarchicalRelationshipView2);
		thesaurusConceptView.setParentConcepts(parentConcepts1);
		ArrayList<String> rootConcepts1 = new ArrayList<String>();
		rootConcepts1.add("hello");
		thesaurusConceptView.setRootConcepts(rootConcepts1);
		thesaurusConceptView.setStatus(1);
		ArrayList<ThesaurusTermView> terms = new ArrayList<ThesaurusTermView>();
		ThesaurusTermView thesaurusTermView = new ThesaurusTermView();
		terms.add(thesaurusTermView);
		thesaurusConceptView.setTerms(terms);
		thesaurusConceptView.setThesaurusId("1234");
		thesaurusConceptView.setTopconcept(false);
		thesaurusConceptView.setTopistopterm(false);
		when(thesaurusConceptViewConverter.convert(Mockito.<ThesaurusConcept>any(), Mockito.<List<ThesaurusTerm>>any()))
			.thenReturn(thesaurusConceptView);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(new ThesaurusConcept());

		// act
		ThesaurusConceptView result = service.getConceptById("1234");

		// assert
		assertThat(result.getAlignments().size(), is(1));
		assertThat(result.getAlignments().get(0), sameInstance(alignmentView));
		assertThat(result.getAssociatedConcepts().size(), is(1));
		assertThat(result.getAssociatedConcepts().get(0), sameInstance(associativeRelationshipView));
		assertThat(result.getChildConcepts().size(), is(1));
		assertThat(result.getChildConcepts().get(0), sameInstance(hierarchicalRelationshipView1));
		assertThat(result.getConceptsPath(), hasSize(1));
		assertThat(result.getConceptsPath().get(0), is("/bin/bash"));
		assertThat(result.getCreated(), is("someone"));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getModified(), is("someone"));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getParentConcepts().size(), is(1));
		assertThat(result.getParentConcepts().get(0), sameInstance(hierarchicalRelationshipView2));
		assertThat(result.getRootConcepts(), hasSize(1));
		assertThat(result.getRootConcepts().get(0), is("hello"));
		assertThat(result.getStatus(), is(1));
		assertThat(result.getTerms().size(), is(1));
		assertThat(result.getTerms().get(0), sameInstance(thesaurusTermView));
		assertThat(result.getThesaurusId(), is("1234"));
		assertThat(result.getTopconcept(), is(false));
		assertThat(result.getTopistopterm(), is(false));
	}

	@Test
	void getConceptsByThesaurusIdLimitIsOneAndOnlyValidatedConceptsIsFalseAndStartIndexIsOne() {

		// arrange
		ArrayList<ThesaurusConceptReducedView> arrayList1 =
			 new ArrayList<ThesaurusConceptReducedView>();
		ThesaurusConceptReducedView thesaurusConceptReducedView =
			 new ThesaurusConceptReducedView();
		arrayList1.add(thesaurusConceptReducedView);
		when(thesaurusConceptViewConverter.convert(Mockito.<List<ThesaurusConcept>>any()))
			.thenReturn(arrayList1);
		when(thesaurusConceptService.getConceptsByThesaurusIdCount(Mockito.<String>any(), Mockito.<String>any(), Mockito.<Boolean>any(), Mockito.<Boolean>any(), Mockito.<String>any()))
			.thenReturn(1L);
		when(thesaurusConceptService.getPaginatedConceptsByThesaurusId(Mockito.<Integer>any(), Mockito.<Integer>any(), Mockito.<String>any(), Mockito.<String>any(), Mockito.<Boolean>any(), Mockito.<Boolean>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getConceptsByThesaurusId(1, 1, "1234", "1234", "1234", false, "1234");

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusConceptReducedView));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getSimpleConceptsAssociatedConceptsIsHello() {

		// arrange
		ThesaurusConceptReducedView thesaurusConceptReducedView =
			 new ThesaurusConceptReducedView();
		when(thesaurusConceptViewConverter.convert(Mockito.<ThesaurusConcept>any()))
			.thenReturn(thesaurusConceptReducedView);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(new ThesaurusConcept());
		ArrayList<String> associatedConcepts = new ArrayList<String>();
		associatedConcepts.add("hello");

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getSimpleConcepts(associatedConcepts);

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusConceptReducedView));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getSimpleChildrenConcepts1() {
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getSimpleChildrenConcepts("hello", "hello");
		assertThat(result.getData(), empty());
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getSimpleChildrenConcepts2() {

		// arrange
		ThesaurusConceptReducedView thesaurusConceptReducedView =
			 new ThesaurusConceptReducedView();
		when(thesaurusConceptViewConverter.convert(Mockito.<ThesaurusConcept>any()))
			.thenReturn(thesaurusConceptReducedView);
		ArrayList<ThesaurusConcept> arrayList = new ArrayList<ThesaurusConcept>();
		ThesaurusConcept thesaurusConcept = mock(ThesaurusConcept.class);
		arrayList.add(thesaurusConcept);
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(arrayList);

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getSimpleChildrenConcepts("hello", "hello");

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusConceptReducedView));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAvailableConceptsOfArrayLikeIsHelloAndLimitIsOneAndStartIndexIsOne() {

		// arrange
		ThesaurusConceptReducedView thesaurusConceptReducedView =
			 new ThesaurusConceptReducedView();
		when(thesaurusConceptViewConverter.convert(Mockito.<ThesaurusConcept>any()))
			.thenReturn(thesaurusConceptReducedView);
		ArrayList<ThesaurusConcept> arrayList2 = new ArrayList<ThesaurusConcept>();
		arrayList2.add(new ThesaurusConcept());
		when(thesaurusConceptService.getAvailableConceptsOfArray(Mockito.<Integer>any(), Mockito.<Integer>any(), Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(arrayList2);
		when(thesaurusConceptService.getAvailableConceptsOfArray(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getAvailableConceptsOfArray(1, 1, "1234", "1234", "hello");

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusConceptReducedView));
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAvailableConceptsOfGroupLikeIsHelloAndLimitIsOneAndStartIndexIsOne() {

		// arrange
		ThesaurusConceptReducedView thesaurusConceptReducedView =
			 new ThesaurusConceptReducedView();
		when(thesaurusConceptViewConverter.convert(Mockito.<ThesaurusConcept>any()))
			.thenReturn(thesaurusConceptReducedView);
		ArrayList<ThesaurusConcept> arrayList2 = new ArrayList<ThesaurusConcept>();
		arrayList2.add(new ThesaurusConcept());
		when(thesaurusConceptService.getAvailableConceptsOfGroup(Mockito.<Integer>any(), Mockito.<Integer>any(), Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(arrayList2);
		when(thesaurusConceptService.getAvailableConceptsOfGroup(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());

		// act
		ExtJsonFormLoadData<List<ThesaurusConceptReducedView>> result =
			 service.getAvailableConceptsOfGroup(1, 1, "1234", "1234", "hello");

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusConceptReducedView));
		assertThat(result.getTotal(), is(0L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void destroyConcept() {

		// arrange
		when(thesaurusService.updateThesaurusDate(Mockito.<Thesaurus>any()))
			.thenReturn(new Thesaurus());
		when(thesaurusConceptService.destroyThesaurusConcept(Mockito.<ThesaurusConcept>any()))
			.thenReturn(new ThesaurusConcept());
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(new ThesaurusConcept());
		ArrayList<Note> arrayList = new ArrayList<Note>();
		arrayList.add(new Note());
		when(noteService.getConceptNotePaginatedList(Mockito.<String>any(), Mockito.<Integer>any(), Mockito.<Integer>any()))
			.thenReturn(arrayList);

		// act
		service.destroyConcept(new ThesaurusConceptView());

		// assert
		Mockito.verify(noteIndexerService).removeNote(Mockito.<Note>any());
		Mockito.verify(conceptIndexerService).removeConcept(Mockito.<ThesaurusConcept>any());
	}

	@Test
	void getAllConceptStatus() {
		ExtJsonFormLoadData<List<GenericStatusView>> result =
			 service.getAllConceptStatus();
		assertThat(result.getData().size(), is(5));
		assertThat(result.getData().get(0).getStatus(), is(0));
		assertThat(result.getData().get(0).getStatusLabel(), is("Candidat"));
		assertThat(result.getData().get(1).getStatus(), is(1));
		assertThat(result.getData().get(1).getStatusLabel(), is("Valid\u00e9"));
		assertThat(result.getData().get(2).getStatus(), is(2));
		assertThat(result.getData().get(2).getStatusLabel(), is("Rejet\u00e9"));
		assertThat(result.getData().get(3).getStatus(), is(3));
		assertThat(result.getData().get(3).getStatusLabel(), is("D\u00e9pr\u00e9ci\u00e9"));
		assertThat(result.getData().get(4).getStatus(), is(4));
		assertThat(result.getData().get(4).getStatusLabel(), is("Prohib\u00e9"));
		assertThat(result.getTotal(), is(5L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getAllHierarchicalRelationRoles() {
		ExtJsonFormLoadData<List<GenericRoleView>> result =
			 service.getAllHierarchicalRelationRoles();
		assertThat(result.getData().size(), is(4));
		assertThat(result.getData().get(0).getRole(), is(0));
		assertThat(result.getData().get(0).getRoleLabel(), is("TG-TS"));
		assertThat(result.getData().get(1).getRole(), is(1));
		assertThat(result.getData().get(1).getRoleLabel(), is("TGG-TSG"));
		assertThat(result.getData().get(2).getRole(), is(2));
		assertThat(result.getData().get(2).getRoleLabel(), is("TGI-TSI"));
		assertThat(result.getData().get(3).getRole(), is(3));
		assertThat(result.getData().get(3).getRoleLabel(), is("TGP-TSP"));
		assertThat(result.getTotal(), is(4L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getConceptThesaurusId() {

		// arrange
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setIdentifier("data");
		thesaurusConcept.setThesaurus(thesaurus);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);

		// act
		ExtJsonFormLoadData<String> result = service.getConceptThesaurusId("1234");

		// assert
		assertThat(result.getData(), is("data"));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}
}

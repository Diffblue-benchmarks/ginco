package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.CustomConceptAttribute;
import fr.mcc.ginco.beans.CustomTermAttribute;
import fr.mcc.ginco.beans.generic.GenericCustomAttributeType;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.GenericCustomAttributeTypeView;
import fr.mcc.ginco.extjs.view.pojo.GenericCustomAttributeView;
import fr.mcc.ginco.extjs.view.utils.CustomAttributeConverter;
import fr.mcc.ginco.extjs.view.utils.CustomAttributesTypesConverter;
import fr.mcc.ginco.services.ICustomConceptAttributeService;
import fr.mcc.ginco.services.ICustomConceptAttributeTypeService;
import fr.mcc.ginco.services.ICustomTermAttributeService;
import fr.mcc.ginco.services.ICustomTermAttributeTypeService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;
import fr.mcc.ginco.services.IThesaurusTermService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.CustomAttributesRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {CustomAttributesRestService.class})
@ExtendWith(SpringExtension.class)
class CustomAttributesRestServiceTest {

	@MockBean(name = "customAttributeConverter")
	private CustomAttributeConverter customAttributeConverter;

	@MockBean(name = "customAttributesTypesConverter")
	private CustomAttributesTypesConverter customAttributesTypesConverter;

	@MockBean(name = "customConceptAttributeService")
	private ICustomConceptAttributeService customConceptAttributeService;

	@MockBean(name = "customConceptAttributeTypeService")
	private ICustomConceptAttributeTypeService customConceptAttributeTypeService;

	@MockBean(name = "customTermAttributeService")
	private ICustomTermAttributeService customTermAttributeService;

	@MockBean(name = "customTermAttributeTypeService")
	private ICustomTermAttributeTypeService customTermAttributeTypeService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@Autowired
	private CustomAttributesRestService service;

	@Test
	void deleteConceptAttributeTypesListIsEmpty() {
		service.deleteConceptAttributeTypes(new ArrayList<GenericCustomAttributeTypeView>());
	}

	@Test
	void deleteTermAttributeTypesListIsEmpty() {
		service.deleteTermAttributeTypes(new ArrayList<GenericCustomAttributeTypeView>());
	}

	@Test
	void updateTermAttribute() {

		// arrange
		when(customTermAttributeService.saveOrUpdate(Mockito.<CustomTermAttribute>any()))
			.thenReturn(new CustomTermAttribute());
		when(customAttributeConverter.convertTermAttribute(Mockito.<GenericCustomAttributeView>any()))
			.thenReturn(new CustomTermAttribute());
		ArrayList<GenericCustomAttributeView> list =
			 new ArrayList<GenericCustomAttributeView>();
		GenericCustomAttributeView genericCustomAttributeView =
			 new GenericCustomAttributeView();
		list.add(genericCustomAttributeView);

		// act
		ExtJsonFormLoadData<List<GenericCustomAttributeView>> result =
			 service.updateTermAttribute(list);

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(genericCustomAttributeView));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void updateConceptAttribute() {

		// arrange
		when(customConceptAttributeService.saveOrUpdate(Mockito.<CustomConceptAttribute>any()))
			.thenReturn(new CustomConceptAttribute());
		when(customAttributeConverter.convertConceptAttribute(Mockito.<GenericCustomAttributeView>any()))
			.thenReturn(new CustomConceptAttribute());
		ArrayList<GenericCustomAttributeView> list =
			 new ArrayList<GenericCustomAttributeView>();
		GenericCustomAttributeView genericCustomAttributeView =
			 new GenericCustomAttributeView();
		list.add(genericCustomAttributeView);

		// act
		ExtJsonFormLoadData<List<GenericCustomAttributeView>> result =
			 service.updateConceptAttribute(list);

		// assert
		assertThat(result.getData().size(), is(1));
		assertThat(result.getData().get(0), sameInstance(genericCustomAttributeView));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}
}

package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Note;
import fr.mcc.ginco.beans.NoteType;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.extjs.view.ExtJsonFormLoadData;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusNoteView;
import fr.mcc.ginco.extjs.view.utils.ThesaurusNoteViewConverter;
import fr.mcc.ginco.rest.services.utils.ThesaurusNoteRestServiceUtils;
import fr.mcc.ginco.services.INoteService;
import fr.mcc.ginco.services.INoteTypeService;
import fr.mcc.ginco.solr.IConceptIndexerService;
import fr.mcc.ginco.solr.INoteIndexerService;
import fr.mcc.ginco.solr.ITermIndexerService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.ThesaurusNoteRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusNoteRestService.class})
@ExtendWith(SpringExtension.class)
class ThesaurusNoteRestServiceTest {

	@MockBean(name = "conceptIndexerService")
	private IConceptIndexerService conceptIndexerService;

	@MockBean(name = "noteIndexerService")
	private INoteIndexerService noteIndexerService;

	@MockBean(name = "noteService")
	private INoteService noteService;

	@MockBean(name = "noteTypeService")
	private INoteTypeService noteTypeService;

	@MockBean(name = "termIndexerService")
	private ITermIndexerService termIndexerService;

	@MockBean(name = "thesaurusNoteRestServiceUtils")
	private ThesaurusNoteRestServiceUtils thesaurusNoteRestServiceUtils;

	@MockBean(name = "thesaurusNoteViewConverter")
	private ThesaurusNoteViewConverter thesaurusNoteViewConverter;

	@Autowired
	private ThesaurusNoteRestService service;

	@Test
	void getConceptNoteTypes() {

		// arrange
		ArrayList<NoteType> noteTypeList = new ArrayList<NoteType>();
		NoteType noteType = new NoteType();
		noteTypeList.add(noteType);
		when(noteTypeService.getConceptNoteTypeList())
			.thenReturn(noteTypeList);

		// act
		ExtJsonFormLoadData<List<NoteType>> result = service.getConceptNoteTypes();

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(noteType));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getTermNoteTypes() {

		// arrange
		ArrayList<NoteType> noteTypeList = new ArrayList<NoteType>();
		NoteType noteType = new NoteType();
		noteTypeList.add(noteType);
		when(noteTypeService.getTermNoteTypeList())
			.thenReturn(noteTypeList);

		// act
		ExtJsonFormLoadData<List<NoteType>> result = service.getTermNoteTypes();

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(noteType));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getNotesLimitIsOneAndStartIndexIsOne() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(noteService.getConceptNoteCount(Mockito.<String>any()))
			.thenReturn(1L);
		when(noteService.getConceptNotePaginatedList(Mockito.<String>any(), Mockito.<Integer>any(), Mockito.<Integer>any()))
			.thenReturn(new ArrayList<Note>());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.getNotes("1234", "1234", 1, 1);

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView));
		assertThat(result.getTotal(), is(1L));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void createNotes1() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(new ArrayList<Note>());
		ArrayList<ThesaurusNoteView> noteViews = new ArrayList<ThesaurusNoteView>();
		noteViews.add(new ThesaurusNoteView());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.createNotes(noteViews, "1234", "1234");

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void createNotes2() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		note1.setLanguage(new Language());
		note1.setLexicalValue("value");
		note1.setNoteType(new NoteType());
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.createOrUpdateNote(Mockito.<Note>any()))
			.thenReturn(new Note());
		ArrayList<ThesaurusNoteView> noteViews = new ArrayList<ThesaurusNoteView>();
		noteViews.add(new ThesaurusNoteView());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.createNotes(noteViews, "1234", "1234");

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).addNote(Mockito.<Note>any());
	}

	@Test
	void createNotes3() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		ThesaurusConcept concept1 = mock(ThesaurusConcept.class);
		note1.setConcept(concept1);
		note1.setLanguage(new Language());
		note1.setLexicalValue("value");
		note1.setNoteType(new NoteType());
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.createOrUpdateNote(Mockito.<Note>any()))
			.thenReturn(new Note());
		ArrayList<ThesaurusNoteView> noteViews = new ArrayList<ThesaurusNoteView>();
		noteViews.add(new ThesaurusNoteView());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.createNotes(noteViews, "1234", "1234");

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).addNote(Mockito.<Note>any());
		Mockito.verify(conceptIndexerService).addConcept(Mockito.<ThesaurusConcept>any());
	}

	@Test
	void updateNotes1() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		note1.setLanguage(new Language());
		note1.setLexicalValue("value");
		note1.setNoteType(new NoteType());
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.createOrUpdateNote(Mockito.<Note>any()))
			.thenReturn(new Note());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.updateNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).addNote(Mockito.<Note>any());
	}

	@Test
	void updateNotes2() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		ThesaurusConcept concept1 = mock(ThesaurusConcept.class);
		note1.setConcept(concept1);
		note1.setLanguage(new Language());
		note1.setLexicalValue("value");
		note1.setNoteType(new NoteType());
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.createOrUpdateNote(Mockito.<Note>any()))
			.thenReturn(new Note());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.updateNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).addNote(Mockito.<Note>any());
		Mockito.verify(conceptIndexerService).addConcept(Mockito.<ThesaurusConcept>any());
	}

	@Test
	void updateNotesNoteViewsIsEmpty() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(new ArrayList<Note>());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.updateNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void destroyNotes1() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.deleteNote(Mockito.<Note>any()))
			.thenReturn(new Note());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.destroyNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).removeNote(Mockito.<Note>any());
	}

	@Test
	void destroyNotes2() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		ArrayList<Note> noteList = new ArrayList<Note>();
		Note note1 = new Note();
		ThesaurusConcept concept1 = mock(ThesaurusConcept.class);
		note1.setConcept(concept1);
		note1.setTerm(new ThesaurusTerm());
		noteList.add(note1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(noteList);
		when(noteService.deleteNote(Mockito.<Note>any()))
			.thenReturn(new Note());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.destroyNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
		Mockito.verify(thesaurusNoteRestServiceUtils).checkExpertAccessToNote(Mockito.<Note>any());
		Mockito.verify(termIndexerService).addTerm(Mockito.<ThesaurusTerm>any());
		Mockito.verify(noteIndexerService).removeNote(Mockito.<Note>any());
		Mockito.verify(conceptIndexerService).addConcept(Mockito.<ThesaurusConcept>any());
	}

	@Test
	void destroyNotesNoteViewsIsEmpty() {

		// arrange
		ArrayList<ThesaurusNoteView> thesaurusNoteViewList =
			 new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView1 = new ThesaurusNoteView();
		thesaurusNoteViewList.add(thesaurusNoteView1);
		when(thesaurusNoteViewConverter.convert(Mockito.<List<Note>>any()))
			.thenReturn(thesaurusNoteViewList);
		when(thesaurusNoteViewConverter.convertToNote(Mockito.<List<ThesaurusNoteView>>any()))
			.thenReturn(new ArrayList<Note>());

		// act
		ExtJsonFormLoadData<List<ThesaurusNoteView>> result =
			 service.destroyNotes(new ArrayList<ThesaurusNoteView>());

		// assert
		assertThat(result.getData(), hasSize(1));
		assertThat(result.getData().get(0), sameInstance(thesaurusNoteView1));
		assertThat(result.getTotal(), is(nullValue()));
		assertThat(result.isSuccess(), is(true));
	}

	@Test
	void getNoteParentEntity1() throws java.io.IOException {
		Note note = new Note();
		ThesaurusTerm termId = new ThesaurusTerm();
		termId.setIdentifier("data");
		note.setTerm(termId);
		when(noteService.getNoteById(Mockito.<String>any()))
			.thenReturn(note);
		assertThat(service.getNoteParentEntity("1234"), is("{\"success\":true,\"data\":{\"parentEntityId\":\"data\",\"isConcept\":false},\"total\":null}"));
	}

	@Test
	void getNoteParentEntity2() throws java.io.IOException {
		Note note = new Note();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setIdentifier("data");
		note.setConcept(concept1);
		note.setTerm(new ThesaurusTerm());
		when(noteService.getNoteById(Mockito.<String>any()))
			.thenReturn(note);
		assertThat(service.getNoteParentEntity("1234"), is("{\"success\":true,\"data\":{\"parentEntityId\":\"data\",\"isConcept\":true},\"total\":null}"));
	}
}

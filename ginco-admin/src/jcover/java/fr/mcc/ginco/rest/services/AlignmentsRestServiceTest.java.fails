package fr.mcc.ginco.rest.services;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.AlignmentType;
import fr.mcc.ginco.beans.ExternalThesaurus;
import fr.mcc.ginco.beans.ExternalThesaurusType;
import fr.mcc.ginco.extjs.view.pojo.ExternalThesaurusView;
import fr.mcc.ginco.extjs.view.utils.ExternalThesaurusViewConverter;
import fr.mcc.ginco.services.IAlignmentTypeService;
import fr.mcc.ginco.services.IExternalThesaurusService;
import fr.mcc.ginco.services.IExternalThesaurusTypeService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.rest.services.AlignmentsRestService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {AlignmentsRestService.class})
@ExtendWith(SpringExtension.class)
class AlignmentsRestServiceTest {

	@MockBean(name = "alignmentTypeService")
	private IAlignmentTypeService alignmentTypeService;

	@MockBean(name = "externalThesaurusService")
	private IExternalThesaurusService externalThesaurusService;

	@MockBean(name = "externalThesaurusTypeService")
	private IExternalThesaurusTypeService externalThesaurusTypeService;

	@MockBean(name = "externalThesaurusViewConverter")
	private ExternalThesaurusViewConverter externalThesaurusViewConverter;

	@Autowired
	private AlignmentsRestService service;

	@Test
	void getAlignmentTypes() {

		// arrange
		ArrayList<AlignmentType> alignmentTypeList = new ArrayList<AlignmentType>();
		AlignmentType alignmentType = new AlignmentType();
		alignmentTypeList.add(alignmentType);
		when(alignmentTypeService.getAlignmentTypeList())
			.thenReturn(alignmentTypeList);

		// act
		List<AlignmentType> result = service.getAlignmentTypes();

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0), sameInstance(alignmentType));
	}

	@Test
	void getExternalThesaurusTypes() {

		// arrange
		ArrayList<ExternalThesaurusType> externalThesaurusTypeList =
			 new ArrayList<ExternalThesaurusType>();
		ExternalThesaurusType externalThesaurusType = new ExternalThesaurusType();
		externalThesaurusTypeList.add(externalThesaurusType);
		when(externalThesaurusTypeService.getExternalThesaurusTypeList())
			.thenReturn(externalThesaurusTypeList);

		// act
		List<ExternalThesaurusType> result = service.getExternalThesaurusTypes();

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0), sameInstance(externalThesaurusType));
	}

	@Test
	void getExternalThesauruses() {

		// arrange
		ExternalThesaurusView externalThesaurusView = new ExternalThesaurusView();
		when(externalThesaurusViewConverter.convertExternalThesaurus(Mockito.<ExternalThesaurus>any()))
			.thenReturn(externalThesaurusView);
		ArrayList<ExternalThesaurus> externalThesaurusList =
			 new ArrayList<ExternalThesaurus>();
		externalThesaurusList.add(new ExternalThesaurus());
		when(externalThesaurusService.getExternalThesaurusList(Mockito.<String>any()))
			.thenReturn(externalThesaurusList);

		// act
		List<ExternalThesaurusView> result =
			 service.getExternalThesauruses("foo=bar");

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0), sameInstance(externalThesaurusView));
	}
}

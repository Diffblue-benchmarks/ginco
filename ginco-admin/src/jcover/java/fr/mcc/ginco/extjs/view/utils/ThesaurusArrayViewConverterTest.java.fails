package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.ark.IIDGeneratorService;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.NodeLabel;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusArrayView;
import fr.mcc.ginco.services.INodeLabelService;
import fr.mcc.ginco.services.IThesaurusArrayService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ThesaurusArrayViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusArrayViewConverter.class})
@ExtendWith(SpringExtension.class)
class ThesaurusArrayViewConverterTest {

	@MockBean(name = "generatorService")
	private IIDGeneratorService generatorService;

	@MockBean(name = "nodeLabelService")
	private INodeLabelService nodeLabelService;

	@MockBean(name = "thesaurusArrayService")
	private IThesaurusArrayService thesaurusArrayService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ThesaurusArrayViewConverter service;

	@Test
	void convert2() {

		// arrange
		Thesaurus thesaurus1 = new Thesaurus();
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus1);
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		ThesaurusArray thesaurusArray1 = new ThesaurusArray();
		ThesaurusArray thesaurusArray2 = new ThesaurusArray();
		thesaurusArray2.setIdentifier("data");
		thesaurusArray2.setNotation("DE");
		when(thesaurusArrayService.getThesaurusArrayById(Mockito.<String>any()))
			.thenReturn(thesaurusArray2)
			.thenReturn(thesaurusArray1);
		ThesaurusArrayView source13 = new ThesaurusArrayView();
		source13.setIdentifier("data");
		source13.setOrder(false);
		source13.setParentArrayId("1234");
		source13.setSuperOrdinateId("1234");
		source13.setThesaurusId("1234");

		// act
		ThesaurusArray result = service.convert(source13);

		// assert
		assertThat(result.getConcepts(), empty());
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getOrdered(), is(false));
		assertThat(result.getParent(), sameInstance(thesaurusArray1));
		assertThat(result.getSuperOrdinateConcept(), sameInstance(thesaurusConcept));
		assertThat(result.getThesaurus(), sameInstance(thesaurus1));
	}

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		when(thesaurusConceptService.getConceptLabel(Mockito.<String>any()))
			.thenReturn("foo=bar");
		NodeLabel nodeLabel1 = new NodeLabel();
		nodeLabel1.setLexicalValue("value");
		NodeLabel nodeLabel2 = new NodeLabel();
		nodeLabel2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		nodeLabel2.setIdentifier(1);
		Language language2 = new Language();
		language2.setId("1234");
		nodeLabel2.setLanguage(language2);
		nodeLabel2.setLexicalValue("value");
		nodeLabel2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		when(nodeLabelService.getByThesaurusArray(Mockito.<String>any()))
			.thenReturn(nodeLabel1);
		when(nodeLabelService.getByThesaurusArrayAndLanguage(Mockito.<String>any()))
			.thenReturn(nodeLabel2);
		ArrayList<ThesaurusArray> arrays = new ArrayList<ThesaurusArray>();
		ThesaurusArray thesaurusArray3 = new ThesaurusArray();
		thesaurusArray3.setIdentifier("data");
		thesaurusArray3.setOrdered(false);
		ThesaurusArray parent4 = new ThesaurusArray();
		parent4.setIdentifier("data");
		thesaurusArray3.setParent(parent4);
		ThesaurusConcept superOrdinateConcept5 = new ThesaurusConcept();
		superOrdinateConcept5.setIdentifier("data");
		thesaurusArray3.setSuperOrdinateConcept(superOrdinateConcept5);
		Thesaurus thesaurus8 = new Thesaurus();
		thesaurus8.setIdentifier("data");
		thesaurusArray3.setThesaurus(thesaurus8);
		arrays.add(thesaurusArray3);

		// act
		List<ThesaurusArrayView> result = service.convert(arrays);

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0).getConcepts(), empty());
		assertThat(result.get(0).getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLabel(), is("value"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.get(0).getNodeLabelId(), is(1));
		assertThat(result.get(0).getOrder(), is(false));
		assertThat(result.get(0).getParentArrayId(), is("data"));
		assertThat(result.get(0).getParentArrayLabel(), is("value"));
		assertThat(result.get(0).getSuperOrdinateId(), is("data"));
		assertThat(result.get(0).getSuperOrdinateLabel(), is("foo=bar"));
		assertThat(result.get(0).getThesaurusId(), is("data"));
	}
}

package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.NodeLabel;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.extjs.view.enums.ThesaurusListNodeType;
import fr.mcc.ginco.extjs.view.node.IThesaurusListNode;
import fr.mcc.ginco.extjs.view.node.ThesaurusListBasicNode;
import fr.mcc.ginco.extjs.view.node.ThesaurusListNodeFactory;
import fr.mcc.ginco.services.INodeLabelService;
import fr.mcc.ginco.services.IThesaurusArrayService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ArraysGenerator
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ArraysGenerator.class})
@ExtendWith(SpringExtension.class)
class ArraysGeneratorTest {

	@MockBean(name = "nodeLabelService")
	private INodeLabelService nodeLabelService;

	@MockBean(name = "thesaurusArrayService")
	private IThesaurusArrayService thesaurusArrayService;

	@MockBean(name = "thesaurusListNodeFactory")
	private ThesaurusListNodeFactory thesaurusListNodeFactory;

	@Autowired
	private ArraysGenerator service;

	@Test
	void generateArrays() {

		// arrange
		ThesaurusListBasicNode thesaurusListBasicNode = new ThesaurusListBasicNode();
		thesaurusListBasicNode.setIconCls("DE");
		thesaurusListBasicNode.setOrganizationName("Smith");
		when(thesaurusListNodeFactory.getListBasicNode())
			.thenReturn(thesaurusListBasicNode);
		ArrayList<ThesaurusArray> thesaurusArrayList =
			 new ArrayList<ThesaurusArray>();
		ThesaurusArray thesaurusArray1 = new ThesaurusArray();
		thesaurusArray1.setIdentifier("data");
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setIdentifier("data");
		thesaurusArray1.setThesaurus(thesaurus3);
		thesaurusArrayList.add(thesaurusArray1);
		when(thesaurusArrayService.getAllThesaurusArrayByThesaurusId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(thesaurusArrayList);
		NodeLabel nodeLabel = new NodeLabel();
		Language language = new Language();
		language.setId("1234");
		nodeLabel.setLanguage(language);
		nodeLabel.setLexicalValue("value");
		when(nodeLabelService.getByThesaurusArray(Mockito.<String>any()))
			.thenReturn(nodeLabel);

		// act
		List<IThesaurusListNode> result = service.generateArrays("1234");

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getChildren(), empty());
		assertThat(result.get(0).getIconCls(), is("DE"));
		assertThat(result.get(0).getId(), is("data"));
		assertThat(result.get(0).getOrganizationName(), is("Smith"));
		assertThat(result.get(0).getThesaurusId(), is("data"));
		assertThat(result.get(0).getTitle(), is("value@1234"));
		assertThat(result.get(0).getType(), is(ThesaurusListNodeType.ARRAYS));
		assertThat(result.get(0).isDisplayable(), is(true));
		assertThat(result.get(0).isExpanded(), is(false));
		assertThat(result.get(0).isLeaf(), is(true));
	}
}

package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.CustomTermAttributeType;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.generic.GenericCustomAttributeType;
import fr.mcc.ginco.extjs.view.pojo.GenericCustomAttributeTypeView;
import fr.mcc.ginco.services.ICustomConceptAttributeTypeService;
import fr.mcc.ginco.services.ICustomTermAttributeTypeService;
import fr.mcc.ginco.services.IThesaurusService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.CustomAttributesTypesConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {CustomAttributesTypesConverter.class})
@ExtendWith(SpringExtension.class)
class CustomAttributesTypesConverterTest {

	@MockBean(name = "customConceptAttributeTypeService")
	private ICustomConceptAttributeTypeService customConceptAttributeTypeService;

	@MockBean(name = "customTermAttributeTypeService")
	private ICustomTermAttributeTypeService customTermAttributeTypeService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private CustomAttributesTypesConverter service;

	@Test
	void convert2() {

		// arrange
		GenericCustomAttributeType source = new GenericCustomAttributeType();
		source.setCode("DE");
		source.setIdentifier(1);
		Thesaurus thesaurus = mock(Thesaurus.class);
		when(thesaurus.getIdentifier())
			.thenReturn("data");
		source.setThesaurus(thesaurus);
		source.setValue("value");

		// act
		GenericCustomAttributeTypeView result = service.convert(source, false);

		// assert
		assertThat(result.getCode(), is("DE"));
		assertThat(result.getExportable(), is(nullValue()));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getThesaurusId(), is("data"));
		assertThat(result.getValue(), is("value"));
	}

	@Test
	void convertListIsConceptIsFalse() {

		// arrange
		ArrayList<GenericCustomAttributeType> sourceList =
			 new ArrayList<GenericCustomAttributeType>();
		GenericCustomAttributeType genericCustomAttributeType =
			 new GenericCustomAttributeType();
		genericCustomAttributeType.setCode("DE");
		genericCustomAttributeType.setIdentifier(1);
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setIdentifier("data");
		genericCustomAttributeType.setThesaurus(thesaurus);
		genericCustomAttributeType.setValue("value");
		sourceList.add(genericCustomAttributeType);

		// act
		List<GenericCustomAttributeTypeView> result =
			 service.convertList(sourceList, false);

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0).getCode(), is("DE"));
		assertThat(result.get(0).getExportable(), is(nullValue()));
		assertThat(result.get(0).getIdentifier(), is(1));
		assertThat(result.get(0).getThesaurusId(), is("data"));
		assertThat(result.get(0).getValue(), is("value"));
	}

	@Test
	void convert1() {

		// arrange
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(new Thesaurus());
		CustomTermAttributeType customTermAttributeType =
			 new CustomTermAttributeType();
		customTermAttributeType.setIdentifier(1);
		Thesaurus thesaurus2 = mock(Thesaurus.class);
		customTermAttributeType.setThesaurus(thesaurus2);
		when(customTermAttributeTypeService.getAttributeTypeById(anyInt()))
			.thenReturn(customTermAttributeType);
		GenericCustomAttributeTypeView view = new GenericCustomAttributeTypeView();
		view.setCode("DE");
		view.setValue("value");

		// act
		GenericCustomAttributeType result = service.convert(view, false);

		// assert
		assertThat(result.getCode(), is("de"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getThesaurus(), sameInstance(thesaurus2));
		assertThat(result.getValue(), is("value"));
	}
}

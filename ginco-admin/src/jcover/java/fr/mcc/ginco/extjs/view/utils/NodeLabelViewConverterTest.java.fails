package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.NodeLabel;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.extjs.view.pojo.NodeLabelView;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.INodeLabelService;

import java.text.SimpleDateFormat;
import java.util.HashSet;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.NodeLabelViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {NodeLabelViewConverter.class})
@ExtendWith(SpringExtension.class)
class NodeLabelViewConverterTest {

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "nodeLabelService")
	private INodeLabelService nodeLabelService;

	@Autowired
	private NodeLabelViewConverter service;

	@Test
	void convert() throws java.text.ParseException {

		// arrange
		NodeLabel source1 = new NodeLabel();
		source1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setIdentifier(1);
		Language language = new Language();
		language.setId("1234");
		source1.setLanguage(language);
		source1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusArray thesaurusArray = new ThesaurusArray();
		thesaurusArray.setIdentifier("data");
		source1.setThesaurusArray(thesaurusArray);

		// act
		NodeLabelView result = service.convert(source1);

		// assert
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getLanguage(), is("1234"));
		assertThat(result.getLexicalValue(), is(nullValue()));
		assertThat(result.getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.getThesaurusArrayId(), is("data"));
	}

	@Test
	void convertSourceIsEmptyReturnsEmpty() {
		assertThat(service.convert(new HashSet<NodeLabel>()), empty());
	}
}

package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.NodeLabel;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusArrayConcept;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.NodeLabelView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusArrayConceptView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusArrayView;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.INodeLabelService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.NodeLabelViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {NodeLabelViewConverter.class})
@ExtendWith(SpringExtension.class)
class NodeLabelViewConverterTest {

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "nodeLabelService")
	private INodeLabelService nodeLabelService;

	@Autowired
	private NodeLabelViewConverter service;

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		NodeLabel source1 = new NodeLabel();
		source1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setIdentifier(1);
		Language language = new Language();
		language.setId("1234");
		source1.setLanguage(language);
		source1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusArray thesaurusArray = new ThesaurusArray();
		thesaurusArray.setIdentifier("data");
		source1.setThesaurusArray(thesaurusArray);

		// act
		NodeLabelView result = service.convert(source1);

		// assert
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getLanguage(), is("1234"));
		assertThat(result.getLexicalValue(), is(nullValue()));
		assertThat(result.getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.getThesaurusArrayId(), is("data"));
	}

	@Test
	void convertSourceIsEmptyReturnsEmpty() {
		assertThat(service.convert(new HashSet<NodeLabel>()), empty());
	}

	@Test
	void convert2() throws java.text.ParseException {

		// arrange
		NodeLabel nodeLabel = new NodeLabel();
		Date created1 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		nodeLabel.setCreated(created1);
		nodeLabel.setIdentifier(1);
		Language language1 = new Language();
		language1.setId("1234");
		language1.setPart1("foo");
		language1.setPrincipalLanguage(false);
		language1.setRefname("root");
		language1.setTopLanguage(false);
		nodeLabel.setLanguage(language1);
		nodeLabel.setLexicalValue("value");
		nodeLabel.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusArray thesaurusArray = new ThesaurusArray();
		thesaurusArray.setConcepts(new HashSet<ThesaurusArrayConcept>());
		thesaurusArray.setIdentifier("data");
		thesaurusArray.setNotation("DE");
		thesaurusArray.setOrdered(false);
		ThesaurusArray parent1 = new ThesaurusArray();
		parent1.setConcepts(new HashSet<ThesaurusArrayConcept>());
		parent1.setIdentifier("data");
		parent1.setNotation("DE");
		parent1.setOrdered(false);
		ThesaurusArray parent2 = new ThesaurusArray();
		parent2.setConcepts(new HashSet<ThesaurusArrayConcept>());
		parent2.setIdentifier("data");
		parent2.setNotation("DE");
		parent2.setOrdered(false);
		parent2.setParent(new ThesaurusArray());
		parent2.setSuperOrdinateConcept(new ThesaurusConcept());
		parent2.setThesaurus(new Thesaurus());
		parent1.setParent(parent2);
		ThesaurusConcept superOrdinateConcept2 = new ThesaurusConcept();
		superOrdinateConcept2.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		superOrdinateConcept2.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		superOrdinateConcept2.setConceptArrays(new HashSet<ThesaurusArray>());
		superOrdinateConcept2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		superOrdinateConcept2.setIdentifier("data");
		superOrdinateConcept2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		superOrdinateConcept2.setNotation("DE");
		superOrdinateConcept2.setParentConcepts(new HashSet<ThesaurusConcept>());
		superOrdinateConcept2.setRootConcepts(new HashSet<ThesaurusConcept>());
		superOrdinateConcept2.setStatus(1);
		superOrdinateConcept2.setThesaurus(new Thesaurus());
		superOrdinateConcept2.setTopConcept(false);
		parent1.setSuperOrdinateConcept(superOrdinateConcept2);
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setArchived(false);
		thesaurus3.setContributor("foo");
		thesaurus3.setCoverage("foo");
		thesaurus3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setCreator(new ThesaurusOrganization());
		thesaurus3.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setDefaultTopConcept(false);
		thesaurus3.setDescription("some text");
		thesaurus3.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus3.setIdentifier("data");
		thesaurus3.setLang(new HashSet<Language>());
		thesaurus3.setPolyHierarchical(false);
		thesaurus3.setPublisher("foo");
		thesaurus3.setRelation("DE");
		thesaurus3.setRights("foo");
		thesaurus3.setSource("foo");
		thesaurus3.setSubject("foo");
		thesaurus3.setTitle("Mr");
		thesaurus3.setType(new ThesaurusType());
		thesaurus3.setVersions(new HashSet<ThesaurusVersionHistory>());
		parent1.setThesaurus(thesaurus3);
		thesaurusArray.setParent(parent1);
		ThesaurusConcept superOrdinateConcept3 = new ThesaurusConcept();
		superOrdinateConcept3.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		superOrdinateConcept3.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		superOrdinateConcept3.setConceptArrays(new HashSet<ThesaurusArray>());
		superOrdinateConcept3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		superOrdinateConcept3.setIdentifier("data");
		superOrdinateConcept3.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		superOrdinateConcept3.setNotation("DE");
		superOrdinateConcept3.setParentConcepts(new HashSet<ThesaurusConcept>());
		superOrdinateConcept3.setRootConcepts(new HashSet<ThesaurusConcept>());
		superOrdinateConcept3.setStatus(1);
		Thesaurus thesaurus4 = new Thesaurus();
		thesaurus4.setArchived(false);
		thesaurus4.setContributor("foo");
		thesaurus4.setCoverage("foo");
		thesaurus4.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus4.setCreator(new ThesaurusOrganization());
		thesaurus4.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus4.setDefaultTopConcept(false);
		thesaurus4.setDescription("some text");
		thesaurus4.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus4.setIdentifier("data");
		thesaurus4.setLang(new HashSet<Language>());
		thesaurus4.setPolyHierarchical(false);
		thesaurus4.setPublisher("foo");
		thesaurus4.setRelation("DE");
		thesaurus4.setRights("foo");
		thesaurus4.setSource("foo");
		thesaurus4.setSubject("foo");
		thesaurus4.setTitle("Mr");
		thesaurus4.setType(new ThesaurusType());
		thesaurus4.setVersions(new HashSet<ThesaurusVersionHistory>());
		superOrdinateConcept3.setThesaurus(thesaurus4);
		superOrdinateConcept3.setTopConcept(false);
		thesaurusArray.setSuperOrdinateConcept(superOrdinateConcept3);
		Thesaurus thesaurus5 = new Thesaurus();
		thesaurus5.setArchived(false);
		thesaurus5.setContributor("foo");
		thesaurus5.setCoverage("foo");
		thesaurus5.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator3 = new ThesaurusOrganization();
		creator3.setEmail("info@diffblue.com");
		creator3.setHomepage("foo");
		creator3.setIdentifier(1);
		creator3.setName("Acme");
		thesaurus5.setCreator(creator3);
		thesaurus5.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus5.setDefaultTopConcept(false);
		thesaurus5.setDescription("some text");
		thesaurus5.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus5.setIdentifier("data");
		thesaurus5.setLang(new HashSet<Language>());
		thesaurus5.setPolyHierarchical(false);
		thesaurus5.setPublisher("foo");
		thesaurus5.setRelation("DE");
		thesaurus5.setRights("foo");
		thesaurus5.setSource("foo");
		thesaurus5.setSubject("foo");
		thesaurus5.setTitle("Mr");
		ThesaurusType type3 = new ThesaurusType();
		type3.setIdentifier(1);
		type3.setLabel("label");
		thesaurus5.setType(type3);
		thesaurus5.setVersions(new HashSet<ThesaurusVersionHistory>());
		thesaurusArray.setThesaurus(thesaurus5);
		nodeLabel.setThesaurusArray(thesaurusArray);
		when(nodeLabelService.getById(Mockito.<Integer>any()))
			.thenReturn(nodeLabel);
		Language language2 = new Language();
		language2.setId("1234");
		language2.setPart1("foo");
		language2.setPrincipalLanguage(false);
		language2.setRefname("root");
		language2.setTopLanguage(false);
		when(languagesService.getLanguageById(Mockito.<String>any()))
			.thenReturn(language2);
		ThesaurusArrayView thesaurusConceptViewJAXBElement =
			 new ThesaurusArrayView();
		ArrayList<ThesaurusArrayConceptView> concepts4 =
			 new ArrayList<ThesaurusArrayConceptView>();
		ThesaurusArrayConceptView thesaurusArrayConceptView =
			 new ThesaurusArrayConceptView();
		thesaurusArrayConceptView.setIdentifier("data");
		thesaurusArrayConceptView.setLabel("label");
		thesaurusArrayConceptView.setOrder(1);
		concepts4.add(thesaurusArrayConceptView);
		thesaurusConceptViewJAXBElement.setConcepts(concepts4);
		thesaurusConceptViewJAXBElement.setCreated("foo");
		thesaurusConceptViewJAXBElement.setIdentifier("data");
		thesaurusConceptViewJAXBElement.setLabel("label");
		thesaurusConceptViewJAXBElement.setLanguage("foo");
		thesaurusConceptViewJAXBElement.setModified("foo");
		thesaurusConceptViewJAXBElement.setNodeLabelId(1);
		thesaurusConceptViewJAXBElement.setOrder(false);
		thesaurusConceptViewJAXBElement.setParentArrayId("1234");
		thesaurusConceptViewJAXBElement.setParentArrayLabel("label");
		thesaurusConceptViewJAXBElement.setSuperOrdinateId("1234");
		thesaurusConceptViewJAXBElement.setSuperOrdinateLabel("label");
		thesaurusConceptViewJAXBElement.setThesaurusId("1234");

		// act
		NodeLabel result = service.convert(thesaurusConceptViewJAXBElement);

		// assert
		assertThat(result.getCreated(), sameInstance(created1));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getLanguage(), sameInstance(language2));
		assertThat(result.getLexicalValue(), is("label"));
		assertThat(Math.abs(result.getModified().getTime()-new Date().getTime())<=10_000L, is(true));
		assertThat(result.getThesaurusArray(), sameInstance(thesaurusArray));
	}
}

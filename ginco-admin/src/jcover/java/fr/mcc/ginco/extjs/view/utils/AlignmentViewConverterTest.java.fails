package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Alignment;
import fr.mcc.ginco.beans.AlignmentConcept;
import fr.mcc.ginco.beans.AlignmentResource;
import fr.mcc.ginco.beans.AlignmentType;
import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.ExternalThesaurus;
import fr.mcc.ginco.beans.ExternalThesaurusType;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.AlignmentConceptView;
import fr.mcc.ginco.extjs.view.pojo.AlignmentResourceView;
import fr.mcc.ginco.extjs.view.pojo.AlignmentView;
import fr.mcc.ginco.extjs.view.pojo.ExternalThesaurusView;
import fr.mcc.ginco.services.IAlignmentService;
import fr.mcc.ginco.services.IAlignmentTypeService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.AlignmentViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {AlignmentViewConverter.class})
@ExtendWith(SpringExtension.class)
class AlignmentViewConverterTest {

	@MockBean(name = "alignmentConceptViewConverter")
	private AlignmentConceptViewConverter alignmentConceptViewConverter;

	@MockBean(name = "alignmentResourceViewConverter")
	private AlignmentResourceViewConverter alignmentResourceViewConverter;

	@MockBean(name = "alignmentService")
	private IAlignmentService alignmentService;

	@MockBean(name = "alignmentTypeService")
	private IAlignmentTypeService alignmentTypeService;

	@MockBean(name = "externalThesaurusViewConverter")
	private ExternalThesaurusViewConverter externalThesaurusViewConverter;

	@Autowired
	private AlignmentViewConverter service;

	@Test
	void convertAlignment1() throws java.text.ParseException {

		// arrange
		Alignment alignment = new Alignment();
		AlignmentType alignmentType = new AlignmentType();
		alignmentType.setIdentifier(1);
		alignment.setAlignmentType(alignmentType);
		alignment.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		alignment.setIdentifier("data");
		Thesaurus internalTargetThesaurus = new Thesaurus();
		internalTargetThesaurus.setIdentifier("data");
		alignment.setInternalTargetThesaurus(internalTargetThesaurus);
		alignment.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));

		// act
		AlignmentView result = service.convertAlignment(alignment);

		// assert
		assertThat(result.getAlignmentType(), is(1));
		assertThat(result.getAndRelation(), is(false));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getCreated()), is(true));
		assertThat(result.getExternalThesaurus(), is(nullValue()));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getInternalThesaurusId(), is("data"));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getModified()), is(true));
		assertThat(result.getTargetConcepts(), empty());
		assertThat(result.getTargetResources(), is(nullValue()));
	}

	@Test
	void convertAlignment2() throws java.text.ParseException {

		// arrange
		ExternalThesaurusView externalThesaurusView = new ExternalThesaurusView();
		when(externalThesaurusViewConverter.convertExternalThesaurus(Mockito.<ExternalThesaurus>any()))
			.thenReturn(externalThesaurusView);
		Alignment alignment = new Alignment();
		AlignmentType alignmentType = new AlignmentType();
		alignmentType.setIdentifier(1);
		alignment.setAlignmentType(alignmentType);
		alignment.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ExternalThesaurus externalTargetThesaurus = mock(ExternalThesaurus.class);
		alignment.setExternalTargetThesaurus(externalTargetThesaurus);
		alignment.setIdentifier("data");
		Thesaurus internalTargetThesaurus = new Thesaurus();
		internalTargetThesaurus.setIdentifier("data");
		alignment.setInternalTargetThesaurus(internalTargetThesaurus);
		alignment.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));

		// act
		AlignmentView result = service.convertAlignment(alignment);

		// assert
		assertThat(result.getAlignmentType(), is(1));
		assertThat(result.getAndRelation(), is(false));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getCreated()), is(true));
		assertThat(result.getExternalThesaurus().size(), is(1));
		assertThat(result.getExternalThesaurus().get(0), sameInstance(externalThesaurusView));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getInternalThesaurusId(), is("data"));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getModified()), is(true));
		assertThat(result.getTargetConcepts(), empty());
		assertThat(result.getTargetResources(), is(nullValue()));
	}

	@Test
	void convertAlignment3() throws java.text.ParseException {

		// arrange
		ExternalThesaurusView externalThesaurusView = new ExternalThesaurusView();
		when(externalThesaurusViewConverter.convertExternalThesaurus(Mockito.<ExternalThesaurus>any()))
			.thenReturn(externalThesaurusView);
		Alignment alignment = new Alignment();
		AlignmentType alignmentType = new AlignmentType();
		alignmentType.setIdentifier(1);
		alignment.setAlignmentType(alignmentType);
		alignment.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		alignment.setExternalTargetThesaurus(new ExternalThesaurus());
		alignment.setIdentifier("data");
		alignment.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));

		// act
		AlignmentView result = service.convertAlignment(alignment);

		// assert
		assertThat(result.getAlignmentType(), is(1));
		assertThat(result.getAndRelation(), is(false));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getCreated()), is(true));
		assertThat(result.getExternalThesaurus().size(), is(1));
		assertThat(result.getExternalThesaurus().get(0), sameInstance(externalThesaurusView));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getInternalThesaurusId(), is(nullValue()));
		assertThat(Pattern.matches("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getModified()), is(true));
		assertThat(result.getTargetConcepts(), empty());
		assertThat(result.getTargetResources(), is(nullValue()));
	}

	@Test
	void convertAlignmentView() throws java.text.ParseException {

		// arrange
		ExternalThesaurus externalThesaurus1 = new ExternalThesaurus();
		externalThesaurus1.setExternalId("1234");
		ExternalThesaurusType externalThesaurusType1 = new ExternalThesaurusType();
		externalThesaurusType1.setIdentifier(1);
		externalThesaurusType1.setLabel("label");
		externalThesaurus1.setExternalThesaurusType(externalThesaurusType1);
		externalThesaurus1.setIdentifier(1);
		when(externalThesaurusViewConverter.convertExternalThesaurusView(Mockito.<ExternalThesaurusView>any()))
			.thenReturn(externalThesaurus1);
		AlignmentType alignmentType1 = new AlignmentType();
		alignmentType1.setDefaultType(false);
		alignmentType1.setIdentifier(1);
		alignmentType1.setIsoCode("DE");
		alignmentType1.setLabel("label");
		alignmentType1.setMultiConcept(false);
		alignmentType1.setResource(false);
		when(alignmentTypeService.getAlignmentTypeById(Mockito.<Integer>any()))
			.thenReturn(alignmentType1);
		Alignment alignment1 = new Alignment();
		AlignmentType alignmentType2 = mock(AlignmentType.class);
		alignment1.setAlignmentType(alignmentType2);
		alignment1.setAndRelation(false);
		alignment1.setAuthor("Ernest Hemingway");
		Date created1 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		alignment1.setCreated(created1);
		ExternalThesaurus externalTargetThesaurus1 = new ExternalThesaurus();
		externalTargetThesaurus1.setExternalId("1234");
		ExternalThesaurusType externalThesaurusType2 = new ExternalThesaurusType();
		externalThesaurusType2.setIdentifier(1);
		externalThesaurusType2.setLabel("label");
		externalTargetThesaurus1.setExternalThesaurusType(externalThesaurusType2);
		externalTargetThesaurus1.setIdentifier(1);
		alignment1.setExternalTargetThesaurus(externalTargetThesaurus1);
		alignment1.setIdentifier("data");
		Thesaurus internalTargetThesaurus1 = new Thesaurus();
		internalTargetThesaurus1.setArchived(false);
		internalTargetThesaurus1.setContributor("foo");
		internalTargetThesaurus1.setCoverage("foo");
		internalTargetThesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator1 = new ThesaurusOrganization();
		creator1.setEmail("info@diffblue.com");
		creator1.setHomepage("foo");
		creator1.setIdentifier(1);
		creator1.setName("Acme");
		internalTargetThesaurus1.setCreator(creator1);
		internalTargetThesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		internalTargetThesaurus1.setDefaultTopConcept(false);
		internalTargetThesaurus1.setDescription("some text");
		internalTargetThesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		internalTargetThesaurus1.setIdentifier("data");
		internalTargetThesaurus1.setLang(new HashSet<Language>());
		internalTargetThesaurus1.setPolyHierarchical(false);
		internalTargetThesaurus1.setPublisher("foo");
		internalTargetThesaurus1.setRelation("DE");
		internalTargetThesaurus1.setRights("foo");
		internalTargetThesaurus1.setSource("foo");
		internalTargetThesaurus1.setSubject("foo");
		internalTargetThesaurus1.setTitle("Mr");
		ThesaurusType type1 = new ThesaurusType();
		type1.setIdentifier(1);
		type1.setLabel("label");
		internalTargetThesaurus1.setType(type1);
		internalTargetThesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		alignment1.setInternalTargetThesaurus(internalTargetThesaurus1);
		alignment1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusConcept sourceConcept1 = new ThesaurusConcept();
		sourceConcept1.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		sourceConcept1.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		sourceConcept1.setConceptArrays(new HashSet<ThesaurusArray>());
		sourceConcept1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		sourceConcept1.setIdentifier("data");
		sourceConcept1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		sourceConcept1.setNotation("DE");
		sourceConcept1.setParentConcepts(new HashSet<ThesaurusConcept>());
		sourceConcept1.setRootConcepts(new HashSet<ThesaurusConcept>());
		sourceConcept1.setStatus(1);
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setArchived(false);
		thesaurus1.setContributor("foo");
		thesaurus1.setCoverage("foo");
		thesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator2 = new ThesaurusOrganization();
		creator2.setEmail("info@diffblue.com");
		creator2.setHomepage("foo");
		creator2.setIdentifier(1);
		creator2.setName("Acme");
		thesaurus1.setCreator(creator2);
		thesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setDefaultTopConcept(false);
		thesaurus1.setDescription("some text");
		thesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus1.setIdentifier("data");
		thesaurus1.setLang(new HashSet<Language>());
		thesaurus1.setPolyHierarchical(false);
		thesaurus1.setPublisher("foo");
		thesaurus1.setRelation("DE");
		thesaurus1.setRights("foo");
		thesaurus1.setSource("foo");
		thesaurus1.setSubject("foo");
		thesaurus1.setTitle("Mr");
		ThesaurusType type2 = new ThesaurusType();
		type2.setIdentifier(1);
		type2.setLabel("label");
		thesaurus1.setType(type2);
		thesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		sourceConcept1.setThesaurus(thesaurus1);
		sourceConcept1.setTopConcept(false);
		alignment1.setSourceConcept(sourceConcept1);
		alignment1.setTargetConcepts(new HashSet<AlignmentConcept>());
		alignment1.setTargetResources(new HashSet<AlignmentResource>());
		when(alignmentService.getAlignmentById(Mockito.<String>any()))
			.thenReturn(alignment1);
		AlignmentConcept alignmentConcept = new AlignmentConcept();
		Alignment alignment2 = new Alignment();
		AlignmentType alignmentType3 = new AlignmentType();
		alignmentType3.setDefaultType(false);
		alignmentType3.setIdentifier(1);
		alignmentType3.setIsoCode("DE");
		alignmentType3.setLabel("label");
		alignmentType3.setMultiConcept(false);
		alignmentType3.setResource(false);
		alignment2.setAlignmentType(alignmentType3);
		alignment2.setAndRelation(false);
		alignment2.setAuthor("Ernest Hemingway");
		alignment2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ExternalThesaurus externalTargetThesaurus2 = new ExternalThesaurus();
		externalTargetThesaurus2.setExternalId("1234");
		ExternalThesaurusType externalThesaurusType3 = new ExternalThesaurusType();
		externalThesaurusType3.setIdentifier(1);
		externalThesaurusType3.setLabel("label");
		externalTargetThesaurus2.setExternalThesaurusType(externalThesaurusType3);
		externalTargetThesaurus2.setIdentifier(1);
		alignment2.setExternalTargetThesaurus(externalTargetThesaurus2);
		alignment2.setIdentifier("data");
		Thesaurus internalTargetThesaurus2 = new Thesaurus();
		internalTargetThesaurus2.setArchived(false);
		internalTargetThesaurus2.setContributor("foo");
		internalTargetThesaurus2.setCoverage("foo");
		internalTargetThesaurus2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator3 = new ThesaurusOrganization();
		creator3.setEmail("info@diffblue.com");
		creator3.setHomepage("foo");
		creator3.setIdentifier(1);
		creator3.setName("Acme");
		internalTargetThesaurus2.setCreator(creator3);
		internalTargetThesaurus2.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		internalTargetThesaurus2.setDefaultTopConcept(false);
		internalTargetThesaurus2.setDescription("some text");
		internalTargetThesaurus2.setFormat(new HashSet<ThesaurusFormat>());
		internalTargetThesaurus2.setIdentifier("data");
		internalTargetThesaurus2.setLang(new HashSet<Language>());
		internalTargetThesaurus2.setPolyHierarchical(false);
		internalTargetThesaurus2.setPublisher("foo");
		internalTargetThesaurus2.setRelation("DE");
		internalTargetThesaurus2.setRights("foo");
		internalTargetThesaurus2.setSource("foo");
		internalTargetThesaurus2.setSubject("foo");
		internalTargetThesaurus2.setTitle("Mr");
		ThesaurusType type3 = new ThesaurusType();
		type3.setIdentifier(1);
		type3.setLabel("label");
		internalTargetThesaurus2.setType(type3);
		internalTargetThesaurus2.setVersions(new HashSet<ThesaurusVersionHistory>());
		alignment2.setInternalTargetThesaurus(internalTargetThesaurus2);
		alignment2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusConcept sourceConcept2 = new ThesaurusConcept();
		sourceConcept2.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		sourceConcept2.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		sourceConcept2.setConceptArrays(new HashSet<ThesaurusArray>());
		sourceConcept2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		sourceConcept2.setIdentifier("data");
		sourceConcept2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		sourceConcept2.setNotation("DE");
		sourceConcept2.setParentConcepts(new HashSet<ThesaurusConcept>());
		sourceConcept2.setRootConcepts(new HashSet<ThesaurusConcept>());
		sourceConcept2.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setArchived(false);
		thesaurus2.setContributor("foo");
		thesaurus2.setCoverage("foo");
		thesaurus2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus2.setCreator(new ThesaurusOrganization());
		thesaurus2.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus2.setDefaultTopConcept(false);
		thesaurus2.setDescription("some text");
		thesaurus2.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus2.setIdentifier("data");
		thesaurus2.setLang(new HashSet<Language>());
		thesaurus2.setPolyHierarchical(false);
		thesaurus2.setPublisher("foo");
		thesaurus2.setRelation("DE");
		thesaurus2.setRights("foo");
		thesaurus2.setSource("foo");
		thesaurus2.setSubject("foo");
		thesaurus2.setTitle("Mr");
		thesaurus2.setType(new ThesaurusType());
		thesaurus2.setVersions(new HashSet<ThesaurusVersionHistory>());
		sourceConcept2.setThesaurus(thesaurus2);
		sourceConcept2.setTopConcept(false);
		alignment2.setSourceConcept(sourceConcept2);
		alignment2.setTargetConcepts(new HashSet<AlignmentConcept>());
		alignment2.setTargetResources(new HashSet<AlignmentResource>());
		alignmentConcept.setAlignment(alignment2);
		alignmentConcept.setExternalTargetConcept("hello");
		alignmentConcept.setIdentifier(1);
		ThesaurusConcept internalTargetConcept1 = new ThesaurusConcept();
		internalTargetConcept1.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		internalTargetConcept1.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		internalTargetConcept1.setConceptArrays(new HashSet<ThesaurusArray>());
		internalTargetConcept1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		internalTargetConcept1.setIdentifier("data");
		internalTargetConcept1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		internalTargetConcept1.setNotation("DE");
		internalTargetConcept1.setParentConcepts(new HashSet<ThesaurusConcept>());
		internalTargetConcept1.setRootConcepts(new HashSet<ThesaurusConcept>());
		internalTargetConcept1.setStatus(1);
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setArchived(false);
		thesaurus3.setContributor("foo");
		thesaurus3.setCoverage("foo");
		thesaurus3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator5 = new ThesaurusOrganization();
		creator5.setEmail("info@diffblue.com");
		creator5.setHomepage("foo");
		creator5.setIdentifier(1);
		creator5.setName("Acme");
		thesaurus3.setCreator(creator5);
		thesaurus3.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setDefaultTopConcept(false);
		thesaurus3.setDescription("some text");
		thesaurus3.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus3.setIdentifier("data");
		thesaurus3.setLang(new HashSet<Language>());
		thesaurus3.setPolyHierarchical(false);
		thesaurus3.setPublisher("foo");
		thesaurus3.setRelation("DE");
		thesaurus3.setRights("foo");
		thesaurus3.setSource("foo");
		thesaurus3.setSubject("foo");
		thesaurus3.setTitle("Mr");
		ThesaurusType type5 = new ThesaurusType();
		type5.setIdentifier(1);
		type5.setLabel("label");
		thesaurus3.setType(type5);
		thesaurus3.setVersions(new HashSet<ThesaurusVersionHistory>());
		internalTargetConcept1.setThesaurus(thesaurus3);
		internalTargetConcept1.setTopConcept(false);
		alignmentConcept.setInternalTargetConcept(internalTargetConcept1);
		when(alignmentConceptViewConverter.convertAlignmentConceptView(Mockito.<AlignmentConceptView>any(), Mockito.<Alignment>any()))
			.thenReturn(alignmentConcept);
		AlignmentView alignmentView = new AlignmentView();
		alignmentView.setAlignmentType(1);
		alignmentView.setAndRelation(false);
		alignmentView.setCreated("someone");
		ArrayList<ExternalThesaurusView> externalThesaurus2 =
			 new ArrayList<ExternalThesaurusView>();
		ExternalThesaurusView externalThesaurusView = new ExternalThesaurusView();
		externalThesaurusView.setExternalId("1234");
		externalThesaurusView.setExternalThesaurusType(1);
		externalThesaurusView.setIdentifier(1);
		externalThesaurus2.add(externalThesaurusView);
		alignmentView.setExternalThesaurus(externalThesaurus2);
		alignmentView.setIdentifier("data");
		alignmentView.setInternalThesaurusId("1234");
		alignmentView.setModified("foo");
		ArrayList<AlignmentConceptView> targetConcepts3 =
			 new ArrayList<AlignmentConceptView>();
		AlignmentConceptView alignmentConceptView = new AlignmentConceptView();
		alignmentConceptView.setExternalTargetConcept("hello");
		alignmentConceptView.setIdentifier(1);
		alignmentConceptView.setInternalTargetConcept("hello");
		targetConcepts3.add(alignmentConceptView);
		alignmentView.setTargetConcepts(targetConcepts3);
		ArrayList<AlignmentResourceView> targetResources3 =
			 new ArrayList<AlignmentResourceView>();
		AlignmentResourceView alignmentResourceView = new AlignmentResourceView();
		alignmentResourceView.setExternalTargetResource("foo");
		alignmentResourceView.setIdentifier(1);
		targetResources3.add(alignmentResourceView);
		alignmentView.setTargetResources(targetResources3);
		ThesaurusConcept convertedConcept = new ThesaurusConcept();
		convertedConcept.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		convertedConcept.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		convertedConcept.setConceptArrays(new HashSet<ThesaurusArray>());
		convertedConcept.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		convertedConcept.setIdentifier("data");
		convertedConcept.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		convertedConcept.setNotation("DE");
		convertedConcept.setParentConcepts(new HashSet<ThesaurusConcept>());
		convertedConcept.setRootConcepts(new HashSet<ThesaurusConcept>());
		convertedConcept.setStatus(1);
		Thesaurus thesaurus4 = new Thesaurus();
		thesaurus4.setArchived(false);
		thesaurus4.setContributor("foo");
		thesaurus4.setCoverage("foo");
		thesaurus4.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator6 = new ThesaurusOrganization();
		creator6.setEmail("info@diffblue.com");
		creator6.setHomepage("foo");
		creator6.setIdentifier(1);
		creator6.setName("Acme");
		thesaurus4.setCreator(creator6);
		thesaurus4.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus4.setDefaultTopConcept(false);
		thesaurus4.setDescription("some text");
		thesaurus4.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus4.setIdentifier("data");
		thesaurus4.setLang(new HashSet<Language>());
		thesaurus4.setPolyHierarchical(false);
		thesaurus4.setPublisher("foo");
		thesaurus4.setRelation("DE");
		thesaurus4.setRights("foo");
		thesaurus4.setSource("foo");
		thesaurus4.setSubject("foo");
		thesaurus4.setTitle("Mr");
		ThesaurusType type6 = new ThesaurusType();
		type6.setIdentifier(1);
		type6.setLabel("label");
		thesaurus4.setType(type6);
		thesaurus4.setVersions(new HashSet<ThesaurusVersionHistory>());
		convertedConcept.setThesaurus(thesaurus4);
		convertedConcept.setTopConcept(false);

		// act
		Alignment result =
			 service.convertAlignmentView(alignmentView, convertedConcept);

		// assert
		assertThat(result.getAlignmentType(), sameInstance(alignmentType1));
		assertThat(result.getAuthor(), is("Ernest Hemingway"));
		assertThat(result.getCreated(), sameInstance(created1));
		assertThat(result.getExternalTargetThesaurus(), sameInstance(externalThesaurus1));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getInternalTargetThesaurus(), sameInstance(thesaurus3));
		assertThat(
			Math.abs(result.getModified().getTime() - new Date().getTime())
			<= 10_000L, is(true));
		assertThat(result.getSourceConcept(), sameInstance(convertedConcept));
		assertThat(result.getTargetConcepts(), hasSize(1));
		assertThat(result.getTargetResources(), empty());
		assertThat(result.isAndRelation(), is(false));
	}
}

package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.extjs.view.enums.ThesaurusListNodeType;
import fr.mcc.ginco.extjs.view.node.IThesaurusListNode;
import fr.mcc.ginco.extjs.view.node.ThesaurusListNodeFactory;
import fr.mcc.ginco.services.IThesaurusConceptService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ChildrenGenerator
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ChildrenGenerator.class})
@ExtendWith(SpringExtension.class)
class ChildrenGeneratorTest {

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusListNodeFactory")
	private ThesaurusListNodeFactory thesaurusListNodeFactory;

	@Autowired
	private ChildrenGenerator service;

	@Test
	void getChildrenByConceptId() throws java.text.ParseException {

		// arrange
		List<ThesaurusConcept> list = new ArrayList<ThesaurusConcept>();
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setConceptArrays(new HashSet<ThesaurusArray>());
		thesaurusConcept.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusConcept.setIdentifier("data");
		thesaurusConcept.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusConcept.setNotation("DE");
		thesaurusConcept.setParentConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setRootConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setStatus(1);
		Thesaurus thesaurus = mock(Thesaurus.class);
		thesaurusConcept.setThesaurus(thesaurus);
		thesaurusConcept.setTopConcept(false);
		list.add(thesaurusConcept);
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), anyInt(), Mockito.<String>any()))
			.thenReturn(list);

		// act
		List<IThesaurusListNode> result = service.getChildrenByConceptId("1234");

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0).getChildren(), empty());
		assertThat(result.get(0).getIconCls(), is("icon-warning"));
		assertThat(result.get(0).getId(), is("27337d7f-f064-41dc-a73d-4122a3d1db2c"));
		assertThat(result.get(0).getOrganizationName(), is(nullValue()));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getTitle(), is("Limite daffichage 0. Utilisez la recherche"));
		assertThat(result.get(0).getType(), is(ThesaurusListNodeType.WARNING));
		assertThat(result.get(0).isDisplayable(), is(false));
		assertThat(result.get(0).isExpanded(), is(false));
		assertThat(result.get(0).isLeaf(), is(true));
	}

	@Test
	void getChildrenByConceptIdReturnsEmpty() {
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), anyInt(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());
		assertThat(service.getChildrenByConceptId("1234"), empty());
	}
}

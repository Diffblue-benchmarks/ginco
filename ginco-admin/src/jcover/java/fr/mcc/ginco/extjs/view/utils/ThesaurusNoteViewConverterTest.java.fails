package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import fr.mcc.ginco.ark.IIDGeneratorService;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Note;
import fr.mcc.ginco.beans.NoteType;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusNoteView;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.INoteService;
import fr.mcc.ginco.services.INoteTypeService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusTermService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ThesaurusNoteViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusNoteViewConverter.class})
@ExtendWith(SpringExtension.class)
class ThesaurusNoteViewConverterTest {

	@MockBean(name = "generatorService")
	private IIDGeneratorService generatorService;

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "noteService")
	private INoteService noteService;

	@MockBean(name = "noteTypeService")
	private INoteTypeService noteTypeService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@Autowired
	private ThesaurusNoteViewConverter service;

	@Test
	void convert() throws java.text.ParseException {

		// arrange
		Note source1 = new Note();
		source1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setIdentifier("foo");
		source1.setLanguage(new Language());
		source1.setLexicalValue("value");
		source1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setNoteType(new NoteType());
		source1.setSource("foo");

		// act
		ThesaurusNoteView result = service.convert(source1);

		// assert
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getIdentifier(), is("foo"));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getLexicalValue(), is("value"));
		assertThat(result.getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getTermId(), is(nullValue()));
		assertThat(result.getThesaurusId(), is(nullValue()));
		assertThat(result.getType(), is(nullValue()));
	}

	@Test
	void convertSourceIsEmptyReturnsEmpty() {
		assertThat(service.convert(new ArrayList<Note>()), empty());
	}

	@Test
	void convertSourceIsNull() {
		ThesaurusNoteView result = service.convert((Note) null);
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getCreated(), is(nullValue()));
		assertThat(result.getIdentifier(), is(nullValue()));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getLexicalValue(), is(nullValue()));
		assertThat(result.getModified(), is(nullValue()));
		assertThat(result.getSource(), is(nullValue()));
		assertThat(result.getTermId(), is(nullValue()));
		assertThat(result.getThesaurusId(), is(nullValue()));
		assertThat(result.getType(), is(nullValue()));
	}

	@Test
	void convertToNoteSourceIsEmptyReturnsEmpty() {
		assertThat(service.convertToNote(new ArrayList<ThesaurusNoteView>()), empty());
	}
}

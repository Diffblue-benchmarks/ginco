package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.matchesPattern;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.ark.IIDGeneratorService;
import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Note;
import fr.mcc.ginco.beans.NoteType;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.beans.ThesaurusTermRole;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusNoteView;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.INoteService;
import fr.mcc.ginco.services.INoteTypeService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusTermService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ThesaurusNoteViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusNoteViewConverter.class})
@ExtendWith(SpringExtension.class)
class ThesaurusNoteViewConverterTest {

	@MockBean(name = "generatorService")
	private IIDGeneratorService generatorService;

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "noteService")
	private INoteService noteService;

	@MockBean(name = "noteTypeService")
	private INoteTypeService noteTypeService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@Autowired
	private ThesaurusNoteViewConverter service;

	@Test
	void convertSourceIsNull() {
		ThesaurusNoteView result = service.convert((Note) null);
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getCreated(), is(nullValue()));
		assertThat(result.getIdentifier(), is(nullValue()));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getLexicalValue(), is(nullValue()));
		assertThat(result.getModified(), is(nullValue()));
		assertThat(result.getSource(), is(nullValue()));
		assertThat(result.getTermId(), is(nullValue()));
		assertThat(result.getThesaurusId(), is(nullValue()));
		assertThat(result.getType(), is(nullValue()));
	}

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		ArrayList<Note> source1 = new ArrayList<Note>();
		Note note = new Note();
		note.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		note.setIdentifier("data");
		Language lang = new Language();
		lang.setId("1234");
		note.setLanguage(lang);
		note.setLexicalValue("value");
		note.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		NoteType noteType = new NoteType();
		noteType.setCode("DE");
		note.setNoteType(noteType);
		note.setSource("foo");
		ThesaurusTerm termId = new ThesaurusTerm();
		termId.setIdentifier("data");
		termId.setThesaurus(new Thesaurus());
		note.setTerm(termId);
		source1.add(note);

		// act
		List<ThesaurusNoteView> result = service.convert(source1);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getConceptId(), is(nullValue()));
		assertThat(result.get(0).getCreated(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getLexicalValue(), is("value"));
		assertThat(result.get(0).getModified(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getSource(), is("foo"));
		assertThat(result.get(0).getTermId(), is("data"));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getType(), is("DE"));
	}

	@Test
	void convert2() throws java.text.ParseException {

		// arrange
		ArrayList<Note> source1 = new ArrayList<Note>();
		Note note = new Note();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setIdentifier("data");
		concept1.setThesaurus(new Thesaurus());
		note.setConcept(concept1);
		note.setIdentifier("data");
		Language lang = new Language();
		lang.setId("1234");
		note.setLanguage(lang);
		note.setLexicalValue("value");
		note.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		NoteType noteType = new NoteType();
		noteType.setCode("DE");
		note.setNoteType(noteType);
		note.setSource("foo");
		source1.add(note);

		// act
		List<ThesaurusNoteView> result = service.convert(source1);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getConceptId(), is("data"));
		assertThat(result.get(0).getCreated(), is(nullValue()));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getLexicalValue(), is("value"));
		assertThat(result.get(0).getModified(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getSource(), is("foo"));
		assertThat(result.get(0).getTermId(), is(nullValue()));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getType(), is("DE"));
	}

	@Test
	void convert3() throws java.text.ParseException {

		// arrange
		ArrayList<Note> source1 = new ArrayList<Note>();
		Note note = new Note();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setIdentifier("data");
		concept1.setThesaurus(new Thesaurus());
		note.setConcept(concept1);
		note.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		note.setIdentifier("data");
		Language lang = new Language();
		lang.setId("1234");
		note.setLanguage(lang);
		note.setLexicalValue("value");
		NoteType noteType = new NoteType();
		noteType.setCode("DE");
		note.setNoteType(noteType);
		note.setSource("foo");
		source1.add(note);

		// act
		List<ThesaurusNoteView> result = service.convert(source1);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getConceptId(), is("data"));
		assertThat(result.get(0).getCreated(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getLexicalValue(), is("value"));
		assertThat(result.get(0).getModified(), is(nullValue()));
		assertThat(result.get(0).getSource(), is("foo"));
		assertThat(result.get(0).getTermId(), is(nullValue()));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getType(), is("DE"));
	}

	@Test
	void convert4() throws java.text.ParseException {

		// arrange
		ArrayList<Note> source1 = new ArrayList<Note>();
		Note note = new Note();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setIdentifier("data");
		concept1.setThesaurus(new Thesaurus());
		note.setConcept(concept1);
		note.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		note.setIdentifier("data");
		Language lang = new Language();
		lang.setId("1234");
		note.setLanguage(lang);
		note.setLexicalValue("value");
		note.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		NoteType noteType = new NoteType();
		noteType.setCode("DE");
		note.setNoteType(noteType);
		source1.add(note);

		// act
		List<ThesaurusNoteView> result = service.convert(source1);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getConceptId(), is("data"));
		assertThat(result.get(0).getCreated(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getLexicalValue(), is("value"));
		assertThat(result.get(0).getModified(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getSource(), is(nullValue()));
		assertThat(result.get(0).getTermId(), is(nullValue()));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getType(), is("DE"));
	}

	@Test
	void convert5() throws java.text.ParseException {

		// arrange
		ArrayList<Note> source1 = new ArrayList<Note>();
		Note note = new Note();
		ThesaurusConcept concept = new ThesaurusConcept();
		concept.setIdentifier("data");
		concept.setThesaurus(new Thesaurus());
		note.setConcept(concept);
		note.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		note.setIdentifier("data");
		Language lang = new Language();
		lang.setId("1234");
		note.setLanguage(lang);
		note.setLexicalValue("value");
		note.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		NoteType noteType = new NoteType();
		noteType.setCode("DE");
		note.setNoteType(noteType);
		note.setSource("foo");
		source1.add(note);

		// act
		List<ThesaurusNoteView> result = service.convert(source1);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0).getConceptId(), is("data"));
		assertThat(result.get(0).getCreated(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLanguage(), is("1234"));
		assertThat(result.get(0).getLexicalValue(), is("value"));
		assertThat(result.get(0).getModified(), matchesPattern("\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}"));
		assertThat(result.get(0).getSource(), is("foo"));
		assertThat(result.get(0).getTermId(), is(nullValue()));
		assertThat(result.get(0).getThesaurusId(), is(nullValue()));
		assertThat(result.get(0).getType(), is("DE"));
	}

	@Test
	void convertSourceIsEmptyReturnsEmpty() {
		assertThat(service.convert(new ArrayList<Note>()), empty());
	}

	@Test
	void convert6() throws java.text.ParseException {

		// arrange
		ThesaurusConcept thesaurusConcept = mock(ThesaurusConcept.class);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		NoteType noteType1 = new NoteType();
		noteType1.setCode("DE");
		noteType1.setIsConcept(false);
		noteType1.setIsTerm(false);
		noteType1.setLabel("label");
		when(noteTypeService.getNoteTypeById(Mockito.<String>any()))
			.thenReturn(noteType1);
		Note note = new Note();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		concept1.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		concept1.setConceptArrays(new HashSet<ThesaurusArray>());
		concept1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept1.setIdentifier("data");
		concept1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept1.setNotation("DE");
		concept1.setParentConcepts(new HashSet<ThesaurusConcept>());
		concept1.setRootConcepts(new HashSet<ThesaurusConcept>());
		concept1.setStatus(1);
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setArchived(false);
		thesaurus1.setContributor("foo");
		thesaurus1.setCoverage("foo");
		thesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setCreator(new ThesaurusOrganization());
		thesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setDefaultTopConcept(false);
		thesaurus1.setDescription("some text");
		thesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus1.setIdentifier("data");
		thesaurus1.setLang(new HashSet<Language>());
		thesaurus1.setPolyHierarchical(false);
		thesaurus1.setPublisher("foo");
		thesaurus1.setRelation("DE");
		thesaurus1.setRights("foo");
		thesaurus1.setSource("foo");
		thesaurus1.setSubject("foo");
		thesaurus1.setTitle("Mr");
		thesaurus1.setType(new ThesaurusType());
		thesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		concept1.setThesaurus(thesaurus1);
		concept1.setTopConcept(false);
		note.setConcept(concept1);
		Date created3 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		note.setCreated(created3);
		note.setIdentifier("data");
		Language lang2 = new Language();
		lang2.setId("1234");
		lang2.setPart1("foo");
		lang2.setPrincipalLanguage(false);
		lang2.setRefname("root");
		lang2.setTopLanguage(false);
		note.setLanguage(lang2);
		note.setLexicalValue("value");
		note.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		NoteType noteType2 = new NoteType();
		noteType2.setCode("DE");
		noteType2.setIsConcept(false);
		noteType2.setIsTerm(false);
		noteType2.setLabel("label");
		note.setNoteType(noteType2);
		note.setSource("foo");
		ThesaurusTerm termId1 = new ThesaurusTerm();
		ThesaurusConcept concept2 = new ThesaurusConcept();
		concept2.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		concept2.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		concept2.setConceptArrays(new HashSet<ThesaurusArray>());
		concept2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept2.setIdentifier("data");
		concept2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept2.setNotation("DE");
		concept2.setParentConcepts(new HashSet<ThesaurusConcept>());
		concept2.setRootConcepts(new HashSet<ThesaurusConcept>());
		concept2.setStatus(1);
		concept2.setThesaurus(new Thesaurus());
		concept2.setTopConcept(false);
		termId1.setConcept(concept2);
		termId1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		termId1.setHidden(false);
		termId1.setIdentifier("data");
		Language language1 = new Language();
		language1.setId("1234");
		language1.setPart1("foo");
		language1.setPrincipalLanguage(false);
		language1.setRefname("root");
		language1.setTopLanguage(false);
		termId1.setLanguage(language1);
		termId1.setLexicalValue("value");
		termId1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		termId1.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		role.setCode("DE");
		role.setDefaultRole(false);
		role.setLabel("label");
		termId1.setRole(role);
		termId1.setSource("foo");
		termId1.setStatus(1);
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setArchived(false);
		thesaurus3.setContributor("foo");
		thesaurus3.setCoverage("foo");
		thesaurus3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setCreator(new ThesaurusOrganization());
		thesaurus3.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setDefaultTopConcept(false);
		thesaurus3.setDescription("some text");
		thesaurus3.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus3.setIdentifier("data");
		thesaurus3.setLang(new HashSet<Language>());
		thesaurus3.setPolyHierarchical(false);
		thesaurus3.setPublisher("foo");
		thesaurus3.setRelation("DE");
		thesaurus3.setRights("foo");
		thesaurus3.setSource("foo");
		thesaurus3.setSubject("foo");
		thesaurus3.setTitle("Mr");
		thesaurus3.setType(new ThesaurusType());
		thesaurus3.setVersions(new HashSet<ThesaurusVersionHistory>());
		termId1.setThesaurus(thesaurus3);
		note.setTerm(termId1);
		when(noteService.getNoteById(Mockito.<String>any()))
			.thenReturn(note);
		Language language2 = new Language();
		language2.setId("1234");
		language2.setPart1("foo");
		language2.setPrincipalLanguage(false);
		language2.setRefname("root");
		language2.setTopLanguage(false);
		when(languagesService.getLanguageById(Mockito.<String>any()))
			.thenReturn(language2);
		ThesaurusNoteView source5 = new ThesaurusNoteView();
		source5.setConceptId("1234");
		source5.setCreated("someone");
		source5.setIdentifier("data");
		source5.setLanguage("foo");
		source5.setLexicalValue("value");
		source5.setModified("someone");
		source5.setSource("foo");
		source5.setTermId("1234");
		source5.setThesaurusId("1234");
		source5.setType("BASIC");

		// act
		Note result = service.convert(source5);

		// assert
		assertThat(result.getConcept(), sameInstance(thesaurusConcept));
		assertThat(result.getCreated(), sameInstance(created3));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLanguage(), sameInstance(language2));
		assertThat(result.getLexicalValue(), is("value"));
		assertThat(
			Math.abs(result.getModified().getTime() - new Date().getTime())
			<= 10_000L, is(true));
		assertThat(result.getNoteType(), sameInstance(noteType1));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getTerm(), sameInstance(termId1));
	}

	@Test
	void convertToNote() {

		// arrange
		ThesaurusConcept thesaurusConcept = mock(ThesaurusConcept.class);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		when(noteTypeService.getNoteTypeById(Mockito.<String>any()))
			.thenReturn(new NoteType());
		Note note = new Note();
		when(noteService.getNoteById(Mockito.<String>any()))
			.thenReturn(note);
		when(languagesService.getLanguageById(Mockito.<String>any()))
			.thenReturn(new Language());
		ArrayList<ThesaurusNoteView> source5 = new ArrayList<ThesaurusNoteView>();
		ThesaurusNoteView thesaurusNoteView = new ThesaurusNoteView();
		thesaurusNoteView.setConceptId("1234");
		thesaurusNoteView.setIdentifier("data");
		thesaurusNoteView.setLanguage("foo");
		thesaurusNoteView.setSource("foo");
		source5.add(thesaurusNoteView);

		// act
		List<Note> result = service.convertToNote(source5);

		// assert
		assertThat(result, hasSize(1));
		assertThat(result.get(0), sameInstance(note));
	}
}

package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.ConceptHierarchicalRelationship;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.extjs.view.pojo.HierarchicalRelationshipView;
import fr.mcc.ginco.services.IConceptHierarchicalRelationshipService;
import fr.mcc.ginco.services.IThesaurusConceptService;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.HierarchicalRelationshipViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {HierarchicalRelationshipViewConverter.class})
@ExtendWith(SpringExtension.class)
class HierarchicalRelationshipViewConverterTest {

	@MockBean(name = "conceptHierarchicalRelationshipService")
	private IConceptHierarchicalRelationshipService conceptHierarchicalRelationshipService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@Autowired
	private HierarchicalRelationshipViewConverter service;

	@Test
	void convertRelationFromChildToParent() {

		// arrange
		ConceptHierarchicalRelationship conceptHierarchicalRelationship1 = new ConceptHierarchicalRelationship();
		ConceptHierarchicalRelationship.Id identifier1 = new ConceptHierarchicalRelationship.Id();
		conceptHierarchicalRelationship1.setIdentifier(identifier1);
		when(conceptHierarchicalRelationshipService.getByChildAndParentIds(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ConceptHierarchicalRelationship())
			.thenReturn(conceptHierarchicalRelationship1);
		HierarchicalRelationshipView hierarchicalRelationView = new HierarchicalRelationshipView();
		hierarchicalRelationView.setRole(1);

		// act
		ConceptHierarchicalRelationship result = service.convertRelationFromChildToParent(hierarchicalRelationView, new ThesaurusConcept());

		// assert
		assertThat(result.getIdentifier(), sameInstance(identifier1));
		assertThat(result.getRole(), is(1));
	}

	@Test
	void getChildrenViews() {
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());
		assertThat(service.getChildrenViews(new ThesaurusConcept()), empty());
	}

	@Test
	void getChildrenViewsConceptIsNull() {
		assertThat(service.getChildrenViews(null), empty());
	}

	@Test
	void getParentViews1() {
		assertThat(service.getParentViews(new ThesaurusConcept()), empty());
	}

	@Test
	void getParentViews2() {
		assertThat(service.getParentViews(new ThesaurusConcept()), empty());
	}

	@Test
	void getParentViewsConceptIsNull() {
		assertThat(service.getParentViews(null), empty());
	}
}

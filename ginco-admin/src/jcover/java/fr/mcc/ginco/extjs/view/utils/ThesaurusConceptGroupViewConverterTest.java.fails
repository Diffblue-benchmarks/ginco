package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import fr.mcc.ginco.ark.IIDGeneratorService;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptGroupView;
import fr.mcc.ginco.services.IThesaurusConceptGroupLabelService;
import fr.mcc.ginco.services.IThesaurusConceptGroupService;
import fr.mcc.ginco.services.IThesaurusConceptGroupTypeService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ThesaurusConceptGroupViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusConceptGroupViewConverter.class})
@ExtendWith(SpringExtension.class)
class ThesaurusConceptGroupViewConverterTest {

	@MockBean(name = "generatorService")
	private IIDGeneratorService generatorService;

	@MockBean(name = "thesaurusConceptGroupLabelService")
	private IThesaurusConceptGroupLabelService thesaurusConceptGroupLabelService;

	@MockBean(name = "thesaurusConceptGroupService")
	private IThesaurusConceptGroupService thesaurusConceptGroupService;

	@MockBean(name = "thesaurusConceptGroupTypeService")
	private IThesaurusConceptGroupTypeService thesaurusConceptGroupTypeService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ThesaurusConceptGroupViewConverter service;

	@Test
	void convertSourceIsNull() {
		ThesaurusConceptGroupView result =
			 service.convert((fr.mcc.ginco.beans.ThesaurusConceptGroup) null);
		assertThat(result.getConcepts(), is(nullValue()));
		assertThat(result.getCreated(), is(nullValue()));
		assertThat(result.getGroupConceptLabelId(), is(nullValue()));
		assertThat(result.getIdentifier(), is(nullValue()));
		assertThat(result.getIsDynamic(), is(nullValue()));
		assertThat(result.getLabel(), is(nullValue()));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getModified(), is(nullValue()));
		assertThat(result.getNotation(), is(nullValue()));
		assertThat(result.getParentConceptId(), is(nullValue()));
		assertThat(result.getParentConceptLabel(), is(nullValue()));
		assertThat(result.getParentGroupId(), is(nullValue()));
		assertThat(result.getParentGroupLabel(), is(nullValue()));
		assertThat(result.getThesaurusId(), is(nullValue()));
		assertThat(result.getType(), is(nullValue()));
	}
}

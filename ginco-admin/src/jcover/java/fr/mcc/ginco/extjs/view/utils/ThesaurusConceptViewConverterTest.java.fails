package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.Alignment;
import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.AlignmentConceptView;
import fr.mcc.ginco.extjs.view.pojo.AlignmentResourceView;
import fr.mcc.ginco.extjs.view.pojo.AlignmentView;
import fr.mcc.ginco.extjs.view.pojo.AssociativeRelationshipView;
import fr.mcc.ginco.extjs.view.pojo.ExternalThesaurusView;
import fr.mcc.ginco.extjs.view.pojo.HierarchicalRelationshipView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptReducedView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusConceptView;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusTermView;
import fr.mcc.ginco.services.IAlignmentService;
import fr.mcc.ginco.services.IAssociativeRelationshipService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.ThesaurusConceptViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ThesaurusConceptViewConverter.class})
@ExtendWith(SpringExtension.class)
class ThesaurusConceptViewConverterTest {

	@MockBean(name = "alignmentService")
	private IAlignmentService alignmentService;

	@MockBean(name = "alignmentViewConverter")
	private AlignmentViewConverter alignmentViewConverter;

	@MockBean(name = "associativeRelationshipService")
	private IAssociativeRelationshipService associativeRelationshipService;

	@MockBean(name = "associativeRelationshipViewConverter")
	private AssociativeRelationshipViewConverter associativeRelationshipViewConverter;

	@MockBean(name = "hierarchicalRelationshipViewConverter")
	private HierarchicalRelationshipViewConverter hierarchicalRelationshipViewConverter;

	@MockBean(name = "termViewConverter")
	private TermViewConverter termViewConverter;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@Autowired
	private ThesaurusConceptViewConverter service;

	@Test
	void convert3() {

		// arrange
		when(thesaurusConceptService.getConceptLabel(Mockito.<String>any()))
			.thenReturn("foo=bar");
		ArrayList<ThesaurusConcept> conceptList = new ArrayList<ThesaurusConcept>();
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setIdentifier("data");
		conceptList.add(thesaurusConcept);

		// act
		List<ThesaurusConceptReducedView> result = service.convert(conceptList);

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0).getIdentifier(), is("data"));
		assertThat(result.get(0).getLabel(), is("foo=bar"));
		assertThat(result.get(0).getLang(), is(nullValue()));
	}

	@Test
	void convert2() {

		// arrange
		when(thesaurusConceptService.getConceptLabel(Mockito.<String>any()))
			.thenReturn("foo=bar");
		ThesaurusConcept concept = new ThesaurusConcept();
		concept.setIdentifier("data");

		// act
		ThesaurusConceptReducedView result = service.convert(concept);

		// assert
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLabel(), is("foo=bar"));
		assertThat(result.getLang(), is(nullValue()));
	}

	@Test
	void convert4() throws java.text.ParseException {

		// arrange
		when(thesaurusConceptService.getRecursiveParentsByConceptId(Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());
		ThesaurusTermView thesaurusTermView = new ThesaurusTermView();
		when(termViewConverter.convert(Mockito.<ThesaurusTerm>any()))
			.thenReturn(thesaurusTermView);
		List<HierarchicalRelationshipView> list2 =
			 new ArrayList<HierarchicalRelationshipView>();
		List<HierarchicalRelationshipView> list3 =
			 new ArrayList<HierarchicalRelationshipView>();
		when(hierarchicalRelationshipViewConverter.getChildrenViews(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list2);
		when(hierarchicalRelationshipViewConverter.getParentViews(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list3);
		AssociativeRelationshipView associativeRelationshipView =
			 new AssociativeRelationshipView();
		when(associativeRelationshipViewConverter.convert(Mockito.<AssociativeRelationship>any(), Mockito.<ThesaurusConcept>any()))
			.thenReturn(associativeRelationshipView);
		List<String> list4 = new ArrayList<String>();
		list4.add("1234");
		when(associativeRelationshipService.getAssociatedConceptsId(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list4);
		when(associativeRelationshipService.getAssociativeRelationshipById(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new AssociativeRelationship());
		AlignmentView alignmentView = new AlignmentView();
		when(alignmentViewConverter.convertAlignment(Mockito.<Alignment>any()))
			.thenReturn(alignmentView);
		List<Alignment> list5 = new ArrayList<Alignment>();
		list5.add(new Alignment());
		when(alignmentService.getAlignmentsBySourceConceptId(Mockito.<String>any()))
			.thenReturn(list5);
		ThesaurusConcept concept3 = new ThesaurusConcept();
		concept3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept3.setIdentifier("data");
		concept3.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept3.setNotation("DE");
		concept3.setStatus(1);
		Thesaurus thesaurus4 = new Thesaurus();
		thesaurus4.setIdentifier("data");
		concept3.setThesaurus(thesaurus4);
		concept3.setTopConcept(false);
		ArrayList<ThesaurusTerm> thesaurusTerms = new ArrayList<ThesaurusTerm>();
		thesaurusTerms.add(new ThesaurusTerm());

		// act
		ThesaurusConceptView result = service.convert(concept3, thesaurusTerms);

		// assert
		assertThat(result.getAlignments().size(), is(1));
		assertThat(result.getAlignments().get(0), sameInstance(alignmentView));
		assertThat(result.getAssociatedConcepts().size(), is(1));
		assertThat(result.getAssociatedConcepts().get(0), sameInstance(associativeRelationshipView));
		assertThat(result.getChildConcepts(), sameInstance(list2));
		assertThat(result.getConceptsPath(), hasSize(1));
		assertThat(result.getConceptsPath().get(0), is("data"));
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getParentConcepts(), sameInstance(list3));
		assertThat(result.getRootConcepts(), empty());
		assertThat(result.getStatus(), is(1));
		assertThat(result.getTerms().size(), is(1));
		assertThat(result.getTerms().get(0), sameInstance(thesaurusTermView));
		assertThat(result.getThesaurusId(), is("data"));
		assertThat(result.getTopconcept(), is(false));
		assertThat(result.getTopistopterm(), is(false));
	}

	@Test
	void convert5() throws java.text.ParseException {

		// arrange
		List<ThesaurusConcept> list1 = new ArrayList<ThesaurusConcept>();
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setIdentifier("data");
		thesaurusConcept.setTopConcept(false);
		list1.add(thesaurusConcept);
		when(thesaurusConceptService.getRecursiveParentsByConceptId(Mockito.<String>any()))
			.thenReturn(list1);
		ThesaurusTermView thesaurusTermView = new ThesaurusTermView();
		when(termViewConverter.convert(Mockito.<ThesaurusTerm>any()))
			.thenReturn(thesaurusTermView);
		List<HierarchicalRelationshipView> list2 =
			 new ArrayList<HierarchicalRelationshipView>();
		List<HierarchicalRelationshipView> list3 =
			 new ArrayList<HierarchicalRelationshipView>();
		when(hierarchicalRelationshipViewConverter.getChildrenViews(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list2);
		when(hierarchicalRelationshipViewConverter.getParentViews(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list3);
		AssociativeRelationshipView associativeRelationshipView =
			 new AssociativeRelationshipView();
		when(associativeRelationshipViewConverter.convert(Mockito.<AssociativeRelationship>any(), Mockito.<ThesaurusConcept>any()))
			.thenReturn(associativeRelationshipView);
		List<String> list4 = new ArrayList<String>();
		list4.add("1234");
		when(associativeRelationshipService.getAssociatedConceptsId(Mockito.<ThesaurusConcept>any()))
			.thenReturn(list4);
		when(associativeRelationshipService.getAssociativeRelationshipById(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new AssociativeRelationship());
		AlignmentView alignmentView = new AlignmentView();
		when(alignmentViewConverter.convertAlignment(Mockito.<Alignment>any()))
			.thenReturn(alignmentView);
		List<Alignment> list5 = new ArrayList<Alignment>();
		list5.add(new Alignment());
		when(alignmentService.getAlignmentsBySourceConceptId(Mockito.<String>any()))
			.thenReturn(list5);
		ThesaurusConcept concept3 = new ThesaurusConcept();
		concept3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept3.setIdentifier("data");
		concept3.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept3.setNotation("DE");
		concept3.setStatus(1);
		Thesaurus thesaurus5 = new Thesaurus();
		thesaurus5.setIdentifier("data");
		concept3.setThesaurus(thesaurus5);
		concept3.setTopConcept(false);
		ArrayList<ThesaurusTerm> thesaurusTerms = new ArrayList<ThesaurusTerm>();
		thesaurusTerms.add(new ThesaurusTerm());

		// act
		ThesaurusConceptView result = service.convert(concept3, thesaurusTerms);

		// assert
		assertThat(result.getAlignments().size(), is(1));
		assertThat(result.getAlignments().get(0), sameInstance(alignmentView));
		assertThat(result.getAssociatedConcepts().size(), is(1));
		assertThat(result.getAssociatedConcepts().get(0), sameInstance(associativeRelationshipView));
		assertThat(result.getChildConcepts(), sameInstance(list2));
		assertThat(result.getConceptsPath(), hasSize(2));
		assertThat(result.getConceptsPath().get(0), is("data"));
		assertThat(result.getConceptsPath().get(1), is("data"));
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getModified(), is("2010-12-31 00:00:00"));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getParentConcepts(), sameInstance(list3));
		assertThat(result.getRootConcepts(), empty());
		assertThat(result.getStatus(), is(1));
		assertThat(result.getTerms().size(), is(1));
		assertThat(result.getTerms().get(0), sameInstance(thesaurusTermView));
		assertThat(result.getThesaurusId(), is("data"));
		assertThat(result.getTopconcept(), is(false));
		assertThat(result.getTopistopterm(), is(false));
	}

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setArchived(false);
		thesaurus1.setContributor("foo");
		thesaurus1.setCoverage("foo");
		thesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator1 = mock(ThesaurusOrganization.class);
		thesaurus1.setCreator(creator1);
		thesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setDefaultTopConcept(false);
		thesaurus1.setDescription("some text");
		thesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus1.setIdentifier("data");
		thesaurus1.setLang(new HashSet<Language>());
		thesaurus1.setPolyHierarchical(false);
		thesaurus1.setPublisher("foo");
		thesaurus1.setRelation("DE");
		thesaurus1.setRights("foo");
		thesaurus1.setSource("foo");
		thesaurus1.setSubject("foo");
		thesaurus1.setTitle("Mr");
		ThesaurusType type1 = new ThesaurusType();
		type1.setIdentifier(1);
		type1.setLabel("label");
		thesaurus1.setType(type1);
		thesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus1);
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setConceptArrays(new HashSet<ThesaurusArray>());
		Date created2 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusConcept.setCreated(created2);
		thesaurusConcept.setIdentifier("data");
		thesaurusConcept.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusConcept.setNotation("DE");
		thesaurusConcept.setParentConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setRootConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setArchived(false);
		thesaurus2.setContributor("foo");
		thesaurus2.setCoverage("foo");
		thesaurus2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator2 = new ThesaurusOrganization();
		creator2.setEmail("info@diffblue.com");
		creator2.setHomepage("foo");
		creator2.setIdentifier(1);
		creator2.setName("Acme");
		thesaurus2.setCreator(creator2);
		thesaurus2.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus2.setDefaultTopConcept(false);
		thesaurus2.setDescription("some text");
		thesaurus2.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus2.setIdentifier("data");
		thesaurus2.setLang(new HashSet<Language>());
		thesaurus2.setPolyHierarchical(false);
		thesaurus2.setPublisher("foo");
		thesaurus2.setRelation("DE");
		thesaurus2.setRights("foo");
		thesaurus2.setSource("foo");
		thesaurus2.setSubject("foo");
		thesaurus2.setTitle("Mr");
		ThesaurusType type2 = new ThesaurusType();
		type2.setIdentifier(1);
		type2.setLabel("label");
		thesaurus2.setType(type2);
		thesaurus2.setVersions(new HashSet<ThesaurusVersionHistory>());
		thesaurusConcept.setThesaurus(thesaurus2);
		thesaurusConcept.setTopConcept(false);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		ThesaurusConceptView source3 = new ThesaurusConceptView();
		ArrayList<AlignmentView> alignments = new ArrayList<AlignmentView>();
		AlignmentView alignmentView = new AlignmentView();
		alignmentView.setAlignmentType(1);
		alignmentView.setAndRelation(false);
		alignmentView.setCreated("foo");
		ArrayList<ExternalThesaurusView> externalThesaurus =
			 new ArrayList<ExternalThesaurusView>();
		externalThesaurus.add(new ExternalThesaurusView());
		alignmentView.setExternalThesaurus(externalThesaurus);
		alignmentView.setIdentifier("data");
		alignmentView.setInternalThesaurusId("1234");
		alignmentView.setModified("foo");
		ArrayList<AlignmentConceptView> targetConcepts =
			 new ArrayList<AlignmentConceptView>();
		targetConcepts.add(new AlignmentConceptView());
		alignmentView.setTargetConcepts(targetConcepts);
		ArrayList<AlignmentResourceView> targetResources =
			 new ArrayList<AlignmentResourceView>();
		targetResources.add(new AlignmentResourceView());
		alignmentView.setTargetResources(targetResources);
		alignments.add(alignmentView);
		source3.setAlignments(alignments);
		ArrayList<AssociativeRelationshipView> associatedConcepts =
			 new ArrayList<AssociativeRelationshipView>();
		AssociativeRelationshipView associativeRelationshipView =
			 new AssociativeRelationshipView();
		associativeRelationshipView.setIdentifier("data");
		associativeRelationshipView.setLabel("label");
		associativeRelationshipView.setRoleCode("DE");
		associatedConcepts.add(associativeRelationshipView);
		source3.setAssociatedConcepts(associatedConcepts);
		ArrayList<HierarchicalRelationshipView> childConcepts =
			 new ArrayList<HierarchicalRelationshipView>();
		HierarchicalRelationshipView hierarchicalRelationshipView1 =
			 new HierarchicalRelationshipView();
		hierarchicalRelationshipView1.setIdentifier("data");
		hierarchicalRelationshipView1.setLabel("label");
		hierarchicalRelationshipView1.setRole(1);
		childConcepts.add(hierarchicalRelationshipView1);
		source3.setChildConcepts(childConcepts);
		ArrayList<String> conceptsPath1 = new ArrayList<String>();
		conceptsPath1.add("/bin/bash");
		source3.setConceptsPath(conceptsPath1);
		source3.setCreated("hello");
		source3.setIdentifier("data");
		source3.setModified("hello");
		source3.setNotation("DE");
		ArrayList<HierarchicalRelationshipView> parentConcepts2 =
			 new ArrayList<HierarchicalRelationshipView>();
		HierarchicalRelationshipView hierarchicalRelationshipView2 =
			 new HierarchicalRelationshipView();
		hierarchicalRelationshipView2.setIdentifier("data");
		hierarchicalRelationshipView2.setLabel("label");
		hierarchicalRelationshipView2.setRole(1);
		parentConcepts2.add(hierarchicalRelationshipView2);
		source3.setParentConcepts(parentConcepts2);
		ArrayList<String> rootConcepts2 = new ArrayList<String>();
		rootConcepts2.add("hello");
		source3.setRootConcepts(rootConcepts2);
		source3.setStatus(1);
		ArrayList<ThesaurusTermView> terms = new ArrayList<ThesaurusTermView>();
		ThesaurusTermView thesaurusTermView = new ThesaurusTermView();
		thesaurusTermView.setConceptId("1234");
		ArrayList<String> conceptsPath2 = new ArrayList<String>();
		conceptsPath2.add("/bin/bash");
		thesaurusTermView.setConceptsPath(conceptsPath2);
		thesaurusTermView.setCreated("foo");
		thesaurusTermView.setHidden(false);
		thesaurusTermView.setIdentifier("data");
		thesaurusTermView.setLanguage("foo");
		thesaurusTermView.setLexicalValue("value");
		thesaurusTermView.setModified("foo");
		thesaurusTermView.setPrefered(false);
		thesaurusTermView.setRole("admin");
		thesaurusTermView.setSource("foo");
		thesaurusTermView.setStatus(1);
		thesaurusTermView.setThesaurusId("1234");
		thesaurusTermView.setTopistopterm(false);
		terms.add(thesaurusTermView);
		source3.setTerms(terms);
		source3.setThesaurusId("1234");
		source3.setTopconcept(false);
		source3.setTopistopterm(false);

		// act
		ThesaurusConcept result = service.convert(source3);

		// assert
		assertThat(result.getAssociativeRelationshipLeft(), is(notNullValue()));
		assertThat(result.getAssociativeRelationshipRight(), is(notNullValue()));
		assertThat(result.getConceptArrays(), is(notNullValue()));
		assertThat(result.getCreated(), sameInstance(created2));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(Math.abs(result.getModified().getTime()-new Date().getTime())<=10_000L, is(true));
		assertThat(result.getNotation(), is("DE"));
		assertThat(result.getParentConcepts(), is(notNullValue()));
		assertThat(result.getRootConcepts(), is(notNullValue()));
		assertThat(result.getStatus(), is(1));
		assertThat(result.getThesaurus(), sameInstance(thesaurus1));
		assertThat(result.getTopConcept(), is(false));
	}

	@Test
	void convertAddedChildrenReturnsEmpty() {
		List<ThesaurusConcept> list = new ArrayList<ThesaurusConcept>();
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setIdentifier("data");
		list.add(thesaurusConcept);
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(list);
		ThesaurusConceptView conceptView = new ThesaurusConceptView();
		ArrayList<HierarchicalRelationshipView> childConcepts =
			 new ArrayList<HierarchicalRelationshipView>();
		HierarchicalRelationshipView hierarchicalRelationshipView1 =
			 new HierarchicalRelationshipView();
		hierarchicalRelationshipView1.setIdentifier("data");
		childConcepts.add(hierarchicalRelationshipView1);
		conceptView.setChildConcepts(childConcepts);
		assertThat(service.convertAddedChildren(conceptView), empty());
	}

	@Test
	void convertRemovedChildrenReturnsEmpty() {
		when(thesaurusConceptService.getChildrenByConceptId(Mockito.<String>any(), Mockito.<String>any()))
			.thenReturn(new ArrayList<ThesaurusConcept>());
		ThesaurusConceptView conceptView = new ThesaurusConceptView();
		ArrayList<HierarchicalRelationshipView> childConcepts =
			 new ArrayList<HierarchicalRelationshipView>();
		childConcepts.add(new HierarchicalRelationshipView());
		conceptView.setChildConcepts(childConcepts);
		assertThat(service.convertRemovedChildren(conceptView), empty());
	}
}

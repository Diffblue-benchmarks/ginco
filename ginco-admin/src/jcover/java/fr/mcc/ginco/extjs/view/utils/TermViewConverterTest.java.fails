package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.ark.IIDGeneratorService;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.beans.ThesaurusTermRole;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.ThesaurusTermView;
import fr.mcc.ginco.services.ILanguagesService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusService;
import fr.mcc.ginco.services.IThesaurusTermRoleService;
import fr.mcc.ginco.services.IThesaurusTermService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.TermViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {TermViewConverter.class})
@ExtendWith(SpringExtension.class)
class TermViewConverterTest {

	@MockBean(name = "generatorService")
	private IIDGeneratorService generatorService;

	@MockBean(name = "languagesService")
	private ILanguagesService languagesService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusService")
	private IThesaurusService thesaurusService;

	@MockBean(name = "thesaurusTermRoleService")
	private IThesaurusTermRoleService thesaurusTermRoleService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@Autowired
	private TermViewConverter service;

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		ThesaurusTerm source1 = new ThesaurusTerm();
		source1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setHidden(false);
		source1.setIdentifier("data");
		Language language = new Language();
		language.setId("1234");
		source1.setLanguage(language);
		source1.setLexicalValue("value");
		source1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		role.setCode("DE");
		source1.setRole(role);
		source1.setSource("foo");
		source1.setStatus(1);
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setIdentifier("data");
		source1.setThesaurus(thesaurus);

		// act
		ThesaurusTermView result = service.convert(source1);

		// assert
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getConceptsPath(), is(nullValue()));
		assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getCreated()), is(true));
		assertThat(result.getHidden(), is(false));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLanguage(), is("1234"));
		assertThat(result.getLexicalValue(), is("value"));
		assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getModified()), is(true));
		assertThat(result.getPrefered(), is(false));
		assertThat(result.getRole(), is("DE"));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getStatus(), is(1));
		assertThat(result.getThesaurusId(), is("data"));
		assertThat(result.getTopistopterm(), is(nullValue()));
	}

	@Test
	void convert2() throws java.text.ParseException {

		// arrange
		ThesaurusTerm source1 = new ThesaurusTerm();
		source1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setHidden(false);
		source1.setIdentifier("data");
		source1.setLexicalValue("value");
		source1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		source1.setPrefered(false);
		source1.setSource("foo");
		source1.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setIdentifier("data");
		source1.setThesaurus(thesaurus2);

		// act
		ThesaurusTermView result = service.convert(source1);

		// assert
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getConceptsPath(), is(nullValue()));
		assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getCreated()), is(true));
		assertThat(result.getHidden(), is(false));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getLexicalValue(), is("value"));
		assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}:\\d{2}", result.getModified()), is(true));
		assertThat(result.getPrefered(), is(false));
		assertThat(result.getRole(), is(nullValue()));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getStatus(), is(1));
		assertThat(result.getThesaurusId(), is("data"));
		assertThat(result.getTopistopterm(), is(nullValue()));
	}

	@Test
	void convertSourceIsNull() {
		ThesaurusTermView result = service.convert(null);
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getConceptsPath(), is(nullValue()));
		assertThat(result.getCreated(), is(nullValue()));
		assertThat(result.getHidden(), is(nullValue()));
		assertThat(result.getIdentifier(), is(nullValue()));
		assertThat(result.getLanguage(), is(nullValue()));
		assertThat(result.getLexicalValue(), is(nullValue()));
		assertThat(result.getModified(), is(nullValue()));
		assertThat(result.getPrefered(), is(nullValue()));
		assertThat(result.getRole(), is(nullValue()));
		assertThat(result.getSource(), is(nullValue()));
		assertThat(result.getStatus(), is(nullValue()));
		assertThat(result.getThesaurusId(), is(nullValue()));
		assertThat(result.getTopistopterm(), is(nullValue()));
	}

	@Test
	void convertFromConceptIsFalse() throws java.text.ParseException {

		// arrange
		ThesaurusTerm thesaurusTerm = new ThesaurusTerm();
		ThesaurusConcept concept = mock(ThesaurusConcept.class);
		thesaurusTerm.setConcept(concept);
		Date created1 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		thesaurusTerm.setCreated(created1);
		thesaurusTerm.setHidden(false);
		thesaurusTerm.setIdentifier("data");
		Language language1 = new Language();
		language1.setId("1234");
		language1.setPart1("foo");
		language1.setPrincipalLanguage(false);
		language1.setRefname("root");
		language1.setTopLanguage(false);
		thesaurusTerm.setLanguage(language1);
		thesaurusTerm.setLexicalValue("value");
		thesaurusTerm.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusTerm.setPrefered(false);
		ThesaurusTermRole role1 = new ThesaurusTermRole();
		role1.setCode("DE");
		role1.setDefaultRole(false);
		role1.setLabel("label");
		thesaurusTerm.setRole(role1);
		thesaurusTerm.setSource("foo");
		thesaurusTerm.setStatus(1);
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setArchived(false);
		thesaurus1.setContributor("foo");
		thesaurus1.setCoverage("foo");
		thesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator1 = new ThesaurusOrganization();
		creator1.setEmail("info@diffblue.com");
		creator1.setHomepage("foo");
		creator1.setIdentifier(1);
		creator1.setName("Acme");
		thesaurus1.setCreator(creator1);
		thesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setDefaultTopConcept(false);
		thesaurus1.setDescription("some text");
		thesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus1.setIdentifier("data");
		thesaurus1.setLang(new HashSet<Language>());
		thesaurus1.setPolyHierarchical(false);
		thesaurus1.setPublisher("foo");
		thesaurus1.setRelation("DE");
		thesaurus1.setRights("foo");
		thesaurus1.setSource("foo");
		thesaurus1.setSubject("foo");
		thesaurus1.setTitle("Mr");
		ThesaurusType type1 = new ThesaurusType();
		type1.setIdentifier(1);
		type1.setLabel("label");
		thesaurus1.setType(type1);
		thesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		thesaurusTerm.setThesaurus(thesaurus1);
		when(thesaurusTermService.getThesaurusTermById(Mockito.<String>any()))
			.thenReturn(thesaurusTerm);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setArchived(false);
		thesaurus2.setContributor("foo");
		thesaurus2.setCoverage("foo");
		thesaurus2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator2 = new ThesaurusOrganization();
		creator2.setEmail("info@diffblue.com");
		creator2.setHomepage("foo");
		creator2.setIdentifier(1);
		creator2.setName("Acme");
		thesaurus2.setCreator(creator2);
		thesaurus2.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus2.setDefaultTopConcept(false);
		thesaurus2.setDescription("some text");
		thesaurus2.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus2.setIdentifier("data");
		thesaurus2.setLang(new HashSet<Language>());
		thesaurus2.setPolyHierarchical(false);
		thesaurus2.setPublisher("foo");
		thesaurus2.setRelation("DE");
		thesaurus2.setRights("foo");
		thesaurus2.setSource("foo");
		thesaurus2.setSubject("foo");
		thesaurus2.setTitle("Mr");
		ThesaurusType type2 = new ThesaurusType();
		type2.setIdentifier(1);
		type2.setLabel("label");
		thesaurus2.setType(type2);
		thesaurus2.setVersions(new HashSet<ThesaurusVersionHistory>());
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(thesaurus2);
		Language language2 = new Language();
		language2.setId("1234");
		language2.setPart1("foo");
		language2.setPrincipalLanguage(false);
		language2.setRefname("root");
		language2.setTopLanguage(false);
		when(languagesService.getLanguageById(Mockito.<String>any()))
			.thenReturn(language2);
		ThesaurusTermView source4 = new ThesaurusTermView();
		source4.setConceptId("1234");
		ArrayList<String> conceptsPath = new ArrayList<String>();
		conceptsPath.add("/bin/bash");
		source4.setConceptsPath(conceptsPath);
		source4.setCreated("foo");
		source4.setHidden(false);
		source4.setIdentifier("data");
		source4.setLanguage("foo");
		source4.setLexicalValue("value");
		source4.setModified("foo");
		source4.setPrefered(false);
		source4.setRole("admin");
		source4.setSource("foo");
		source4.setStatus(1);
		source4.setThesaurusId("1234");
		source4.setTopistopterm(false);

		// act
		ThesaurusTerm result = service.convert(source4, false);

		// assert
		assertThat(result.getConcept(), sameInstance(concept));
		assertThat(result.getCreated(), sameInstance(created1));
		assertThat(result.getHidden(), is(false));
		assertThat(result.getIdentifier(), is("data"));
		assertThat(result.getLanguage(), sameInstance(language2));
		assertThat(result.getLexicalValue(), is("value"));
		assertThat(
			Math.abs(result.getModified().getTime() - new Date().getTime())
			<= 10_000L, is(true));
		assertThat(result.getPrefered(), is(false));
		assertThat(result.getRole(), sameInstance(role1));
		assertThat(result.getSource(), is("foo"));
		assertThat(result.getStatus(), is(1));
		assertThat(result.getThesaurus(), sameInstance(thesaurus2));
	}

	@Test
	void convertTermViewsInTermsFromConceptIsFalse() {

		// arrange
		ThesaurusTerm thesaurusTerm = new ThesaurusTerm();
		when(thesaurusTermService.getThesaurusTermById(Mockito.<String>any()))
			.thenReturn(thesaurusTerm);
		when(thesaurusService.getThesaurusById(Mockito.<String>any()))
			.thenReturn(new Thesaurus());
		when(languagesService.getLanguageById(Mockito.<String>any()))
			.thenReturn(new Language());
		ArrayList<ThesaurusTermView> termViews = new ArrayList<ThesaurusTermView>();
		ThesaurusTermView thesaurusTermView = new ThesaurusTermView();
		thesaurusTermView.setIdentifier("data");
		thesaurusTermView.setLanguage("foo");
		thesaurusTermView.setLexicalValue("value");
		termViews.add(thesaurusTermView);

		// act
		List<ThesaurusTerm> result =
			 service.convertTermViewsInTerms(termViews, false);

		// assert
		assertThat(result.size(), is(1));
		assertThat(result.get(0), sameInstance(thesaurusTerm));
	}
}

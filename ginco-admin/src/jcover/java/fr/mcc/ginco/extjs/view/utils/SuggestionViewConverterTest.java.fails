package fr.mcc.ginco.extjs.view.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import fr.mcc.ginco.beans.AssociativeRelationship;
import fr.mcc.ginco.beans.Language;
import fr.mcc.ginco.beans.Suggestion;
import fr.mcc.ginco.beans.Thesaurus;
import fr.mcc.ginco.beans.ThesaurusArray;
import fr.mcc.ginco.beans.ThesaurusConcept;
import fr.mcc.ginco.beans.ThesaurusFormat;
import fr.mcc.ginco.beans.ThesaurusOrganization;
import fr.mcc.ginco.beans.ThesaurusTerm;
import fr.mcc.ginco.beans.ThesaurusTermRole;
import fr.mcc.ginco.beans.ThesaurusType;
import fr.mcc.ginco.beans.ThesaurusVersionHistory;
import fr.mcc.ginco.extjs.view.pojo.SuggestionView;
import fr.mcc.ginco.services.ISuggestionService;
import fr.mcc.ginco.services.IThesaurusConceptService;
import fr.mcc.ginco.services.IThesaurusTermService;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for fr.mcc.ginco.extjs.view.utils.SuggestionViewConverter
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {SuggestionViewConverter.class})
@ExtendWith(SpringExtension.class)
class SuggestionViewConverterTest {

	@MockBean(name = "suggestionService")
	private ISuggestionService suggestionService;

	@MockBean(name = "thesaurusConceptService")
	private IThesaurusConceptService thesaurusConceptService;

	@MockBean(name = "thesaurusTermService")
	private IThesaurusTermService thesaurusTermService;

	@Autowired
	private SuggestionViewConverter service;

	@Test
	void convert1() throws java.text.ParseException {

		// arrange
		Suggestion suggestion = new Suggestion();
		suggestion.setContent("hello");
		suggestion.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		suggestion.setCreator("+");
		suggestion.setIdentifier(1);
		suggestion.setRecipient("1234");
		ThesaurusTerm term = new ThesaurusTerm();
		term.setIdentifier("data");
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setIdentifier("data");
		term.setThesaurus(thesaurus2);
		suggestion.setTerm(term);

		// act
		SuggestionView result = service.convert(suggestion);

		// assert
		assertThat(result.getConceptId(), is(nullValue()));
		assertThat(result.getContent(), is("hello"));
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getCreator(), is("+"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getRecipient(), is("1234"));
		assertThat(result.getTermId(), is("data"));
		assertThat(result.getThesaurusId(), is("data"));
	}

	@Test
	void convert2() {

		// arrange
		Suggestion suggestion = new Suggestion();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setIdentifier("data");
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setIdentifier("data");
		concept1.setThesaurus(thesaurus1);
		suggestion.setConcept(concept1);
		suggestion.setContent("hello");
		suggestion.setCreator("+");
		suggestion.setIdentifier(1);
		suggestion.setRecipient("1234");

		// act
		SuggestionView result = service.convert(suggestion);

		// assert
		assertThat(result.getConceptId(), is("data"));
		assertThat(result.getContent(), is("hello"));
		assertThat(result.getCreated(), is(nullValue()));
		assertThat(result.getCreator(), is("+"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getRecipient(), is("1234"));
		assertThat(result.getTermId(), is(nullValue()));
		assertThat(result.getThesaurusId(), is("data"));
	}

	@Test
	void convert3() throws java.text.ParseException {

		// arrange
		Suggestion suggestion = new Suggestion();
		ThesaurusConcept concept = new ThesaurusConcept();
		concept.setIdentifier("data");
		Thesaurus thesaurus = new Thesaurus();
		thesaurus.setIdentifier("data");
		concept.setThesaurus(thesaurus);
		suggestion.setConcept(concept);
		suggestion.setContent("hello");
		suggestion.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		suggestion.setCreator("+");
		suggestion.setIdentifier(1);
		suggestion.setRecipient("1234");

		// act
		SuggestionView result = service.convert(suggestion);

		// assert
		assertThat(result.getConceptId(), is("data"));
		assertThat(result.getContent(), is("hello"));
		assertThat(result.getCreated(), is("2010-12-31 00:00:00"));
		assertThat(result.getCreator(), is("+"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getRecipient(), is("1234"));
		assertThat(result.getTermId(), is(nullValue()));
		assertThat(result.getThesaurusId(), is("data"));
	}

	@Test
	void convert4() throws java.text.ParseException {

		// arrange
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		Suggestion suggestion = new Suggestion();
		Date created5 = new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31");
		suggestion.setCreated(created5);
		suggestion.setIdentifier(1);
		ThesaurusTerm term = mock(ThesaurusTerm.class);
		suggestion.setTerm(term);
		when(suggestionService.getSuggestionById(Mockito.<Integer>any()))
			.thenReturn(suggestion);
		SuggestionView source3 = new SuggestionView();
		source3.setConceptId("1234");
		source3.setContent("hello");
		source3.setCreator("+");
		source3.setIdentifier(1);
		source3.setRecipient("1234");

		// act
		Suggestion result = service.convert(source3);

		// assert
		assertThat(result.getConcept(), sameInstance(thesaurusConcept));
		assertThat(result.getContent(), is("hello"));
		assertThat(result.getCreated(), sameInstance(created5));
		assertThat(result.getCreator(), is("+"));
		assertThat(result.getIdentifier(), is(1));
		assertThat(result.getRecipient(), is("1234"));
		assertThat(result.getTerm(), sameInstance(term));
	}

	@Test
	void convert5() throws java.text.ParseException {

		// arrange
		ThesaurusConcept thesaurusConcept = new ThesaurusConcept();
		thesaurusConcept.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		thesaurusConcept.setConceptArrays(new HashSet<ThesaurusArray>());
		thesaurusConcept.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusConcept.setIdentifier("data");
		thesaurusConcept.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurusConcept.setNotation("DE");
		thesaurusConcept.setParentConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setRootConcepts(new HashSet<ThesaurusConcept>());
		thesaurusConcept.setStatus(1);
		Thesaurus thesaurus1 = new Thesaurus();
		thesaurus1.setArchived(false);
		thesaurus1.setContributor("foo");
		thesaurus1.setCoverage("foo");
		thesaurus1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator1 = new ThesaurusOrganization();
		creator1.setEmail("info@diffblue.com");
		creator1.setHomepage("foo");
		creator1.setIdentifier(1);
		creator1.setName("Acme");
		thesaurus1.setCreator(creator1);
		thesaurus1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus1.setDefaultTopConcept(false);
		thesaurus1.setDescription("some text");
		thesaurus1.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus1.setIdentifier("data");
		thesaurus1.setLang(new HashSet<Language>());
		thesaurus1.setPolyHierarchical(false);
		thesaurus1.setPublisher("foo");
		thesaurus1.setRelation("DE");
		thesaurus1.setRights("foo");
		thesaurus1.setSource("foo");
		thesaurus1.setSubject("foo");
		thesaurus1.setTitle("Mr");
		ThesaurusType type1 = new ThesaurusType();
		type1.setIdentifier(1);
		type1.setLabel("label");
		thesaurus1.setType(type1);
		thesaurus1.setVersions(new HashSet<ThesaurusVersionHistory>());
		thesaurusConcept.setThesaurus(thesaurus1);
		thesaurusConcept.setTopConcept(false);
		when(thesaurusConceptService.getThesaurusConceptById(Mockito.<String>any()))
			.thenReturn(thesaurusConcept);
		Suggestion suggestion = new Suggestion();
		ThesaurusConcept concept1 = new ThesaurusConcept();
		concept1.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		concept1.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		concept1.setConceptArrays(new HashSet<ThesaurusArray>());
		concept1.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept1.setIdentifier("data");
		concept1.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept1.setNotation("DE");
		concept1.setParentConcepts(new HashSet<ThesaurusConcept>());
		concept1.setRootConcepts(new HashSet<ThesaurusConcept>());
		concept1.setStatus(1);
		Thesaurus thesaurus2 = new Thesaurus();
		thesaurus2.setArchived(false);
		thesaurus2.setContributor("foo");
		thesaurus2.setCoverage("foo");
		thesaurus2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator2 = new ThesaurusOrganization();
		creator2.setEmail("info@diffblue.com");
		creator2.setHomepage("foo");
		creator2.setIdentifier(1);
		creator2.setName("Acme");
		thesaurus2.setCreator(creator2);
		thesaurus2.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus2.setDefaultTopConcept(false);
		thesaurus2.setDescription("some text");
		thesaurus2.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus2.setIdentifier("data");
		thesaurus2.setLang(new HashSet<Language>());
		thesaurus2.setPolyHierarchical(false);
		thesaurus2.setPublisher("foo");
		thesaurus2.setRelation("DE");
		thesaurus2.setRights("foo");
		thesaurus2.setSource("foo");
		thesaurus2.setSubject("foo");
		thesaurus2.setTitle("Mr");
		ThesaurusType type2 = new ThesaurusType();
		type2.setIdentifier(1);
		type2.setLabel("label");
		thesaurus2.setType(type2);
		thesaurus2.setVersions(new HashSet<ThesaurusVersionHistory>());
		concept1.setThesaurus(thesaurus2);
		concept1.setTopConcept(false);
		suggestion.setConcept(concept1);
		suggestion.setContent("hello");
		suggestion.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		suggestion.setCreator("+");
		suggestion.setIdentifier(1);
		suggestion.setRecipient("1234");
		ThesaurusTerm term = new ThesaurusTerm();
		ThesaurusConcept concept2 = new ThesaurusConcept();
		concept2.setAssociativeRelationshipLeft(new HashSet<AssociativeRelationship>());
		concept2.setAssociativeRelationshipRight(new HashSet<AssociativeRelationship>());
		concept2.setConceptArrays(new HashSet<ThesaurusArray>());
		concept2.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept2.setIdentifier("data");
		concept2.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		concept2.setNotation("DE");
		concept2.setParentConcepts(new HashSet<ThesaurusConcept>());
		concept2.setRootConcepts(new HashSet<ThesaurusConcept>());
		concept2.setStatus(1);
		Thesaurus thesaurus3 = new Thesaurus();
		thesaurus3.setArchived(false);
		thesaurus3.setContributor("foo");
		thesaurus3.setCoverage("foo");
		thesaurus3.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setCreator(new ThesaurusOrganization());
		thesaurus3.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus3.setDefaultTopConcept(false);
		thesaurus3.setDescription("some text");
		thesaurus3.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus3.setIdentifier("data");
		thesaurus3.setLang(new HashSet<Language>());
		thesaurus3.setPolyHierarchical(false);
		thesaurus3.setPublisher("foo");
		thesaurus3.setRelation("DE");
		thesaurus3.setRights("foo");
		thesaurus3.setSource("foo");
		thesaurus3.setSubject("foo");
		thesaurus3.setTitle("Mr");
		thesaurus3.setType(new ThesaurusType());
		thesaurus3.setVersions(new HashSet<ThesaurusVersionHistory>());
		concept2.setThesaurus(thesaurus3);
		concept2.setTopConcept(false);
		term.setConcept(concept2);
		term.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		term.setHidden(false);
		term.setIdentifier("data");
		Language language = new Language();
		language.setId("1234");
		language.setPart1("foo");
		language.setPrincipalLanguage(false);
		language.setRefname("root");
		language.setTopLanguage(false);
		term.setLanguage(language);
		term.setLexicalValue("value");
		term.setModified(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		term.setPrefered(false);
		ThesaurusTermRole role = new ThesaurusTermRole();
		role.setCode("DE");
		role.setDefaultRole(false);
		role.setLabel("label");
		term.setRole(role);
		term.setSource("foo");
		term.setStatus(1);
		Thesaurus thesaurus4 = new Thesaurus();
		thesaurus4.setArchived(false);
		thesaurus4.setContributor("foo");
		thesaurus4.setCoverage("foo");
		thesaurus4.setCreated(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		ThesaurusOrganization creator5 = new ThesaurusOrganization();
		creator5.setEmail("info@diffblue.com");
		creator5.setHomepage("foo");
		creator5.setIdentifier(1);
		creator5.setName("Acme");
		thesaurus4.setCreator(creator5);
		thesaurus4.setDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"));
		thesaurus4.setDefaultTopConcept(false);
		thesaurus4.setDescription("some text");
		thesaurus4.setFormat(new HashSet<ThesaurusFormat>());
		thesaurus4.setIdentifier("data");
		thesaurus4.setLang(new HashSet<Language>());
		thesaurus4.setPolyHierarchical(false);
		thesaurus4.setPublisher("foo");
		thesaurus4.setRelation("DE");
		thesaurus4.setRights("foo");
		thesaurus4.setSource("foo");
		thesaurus4.setSubject("foo");
		thesaurus4.setTitle("Mr");
		ThesaurusType type4 = new ThesaurusType();
		type4.setIdentifier(1);
		type4.setLabel("label");
		thesaurus4.setType(type4);
		thesaurus4.setVersions(new HashSet<ThesaurusVersionHistory>());
		term.setThesaurus(thesaurus4);
		suggestion.setTerm(term);
		SuggestionView source6 = new SuggestionView();
		source6.setConceptId("1234");
		source6.setContent("hello");
		source6.setCreated("1234");
		source6.setCreator("+");
		source6.setIdentifier(null);
		source6.setRecipient("1234");
		source6.setTermId("1234");
		source6.setThesaurusId("1234");

		// act
		Suggestion result = service.convert(source6);

		// assert
		assertThat(result.getConcept(), sameInstance(thesaurusConcept));
		assertThat(result.getContent(), is("hello"));
		assertThat(Math.abs(result.getCreated().getTime()-new Date().getTime())<=10_000L, is(true));
		assertThat(result.getCreator(), is("+"));
		assertThat(result.getIdentifier(), is(nullValue()));
		assertThat(result.getRecipient(), is("1234"));
		assertThat(result.getTerm(), is(nullValue()));
	}
}
